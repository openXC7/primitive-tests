// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : top.v
// Device     : xc7k70t-fbg676-1
// LiteX sha1 : dd54d77db
// Date       : 2025-04-08 12:36:07
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module gtx_channel (
    input  wire          clk200_n,
    input  wire          clk200_p,
    input  wire          pcie_rx_n,
    input  wire          pcie_rx_p,
    output wire          pcie_tx_n,
    output wire          pcie_tx_p,
    output wire          user_led0,
    output wire          user_led1,
    output wire          user_led2,
    output wire          user_led3
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          clkin;
wire          clkout0;
wire          clkout1;
wire          clkout_buf0;
wire          clkout_buf1;
reg    [31:0] counter = 32'd0;
reg     [2:0] f_self0 = 3'd0;
reg     [2:0] f_self1 = 3'd0;
wire          gpll_clk;
reg     [8:0] gpll_drp_addr = 9'd0;
reg           gpll_drp_clk = 1'd0;
reg    [15:0] gpll_drp_di = 16'd0;
wire   [15:0] gpll_drp_do;
reg           gpll_drp_en = 1'd0;
wire          gpll_drp_rdy;
reg           gpll_drp_we = 1'd0;
wire          gpll_lock;
reg           gpll_powerdown = 1'd0;
wire          gpll_refclk;
wire          gpll_reset;
wire          gtx0;
wire          gtx1;
wire          gtx10;
wire          gtx11;
wire          gtx12;
wire          gtx13;
wire          gtx14;
wire          gtx15;
wire          gtx16;
wire          gtx17;
wire          gtx18;
wire          gtx19;
wire          gtx2;
wire          gtx20;
wire          gtx21;
wire          gtx22;
wire          gtx23;
wire          gtx24;
wire          gtx25;
wire          gtx26;
wire          gtx27;
wire          gtx28;
wire          gtx29;
wire          gtx3;
wire          gtx30;
wire          gtx31;
wire          gtx32;
wire          gtx33;
wire          gtx34;
wire          gtx35;
wire          gtx36;
wire          gtx37;
wire          gtx38;
wire          gtx39;
wire          gtx4;
wire          gtx40;
wire          gtx41;
wire          gtx42;
wire          gtx43;
wire          gtx44;
wire          gtx45;
wire          gtx46;
wire          gtx47;
wire          gtx48;
reg    [19:0] gtx49 = 20'd1023;
wire          gtx5;
wire          gtx6;
wire          gtx7;
wire          gtx8;
wire          gtx9;
wire    [5:0] gtx_decoder0_adr;
reg           gtx_decoder0_ce = 1'd1;
reg     [2:0] gtx_decoder0_code3b = 3'd0;
wire    [4:0] gtx_decoder0_code5b;
wire    [7:0] gtx_decoder0_d;
wire    [4:0] gtx_decoder0_dat_r;
wire    [9:0] gtx_decoder0_input;
reg     [9:0] gtx_decoder0_input_msb_first = 10'd0;
wire          gtx_decoder0_invalid;
reg           gtx_decoder0_k = 1'd0;
reg     [3:0] gtx_decoder0_ones = 4'd0;
wire          gtx_decoder0_re;
wire    [5:0] gtx_decoder1_adr;
reg           gtx_decoder1_ce = 1'd1;
reg     [2:0] gtx_decoder1_code3b = 3'd0;
wire    [4:0] gtx_decoder1_code5b;
wire    [7:0] gtx_decoder1_d;
wire    [4:0] gtx_decoder1_dat_r;
wire    [9:0] gtx_decoder1_input;
reg     [9:0] gtx_decoder1_input_msb_first = 10'd0;
wire          gtx_decoder1_invalid;
reg           gtx_decoder1_k = 1'd0;
reg     [3:0] gtx_decoder1_ones = 4'd0;
wire          gtx_decoder1_re;
reg     [8:0] gtx_drp_addr = 9'd0;
reg           gtx_drp_clk = 1'd0;
reg    [15:0] gtx_drp_di = 16'd0;
reg    [15:0] gtx_drp_do = 16'd0;
reg           gtx_drp_en = 1'd0;
reg     [8:0] gtx_drp_mux_addr = 9'd0;
reg           gtx_drp_mux_clk = 1'd0;
reg    [15:0] gtx_drp_mux_di = 16'd0;
wire   [15:0] gtx_drp_mux_do;
reg           gtx_drp_mux_en = 1'd0;
wire          gtx_drp_mux_rdy;
reg           gtx_drp_mux_we = 1'd0;
reg           gtx_drp_rdy = 1'd0;
reg           gtx_drp_we = 1'd0;
reg     [7:0] gtx_encoder0 = 8'd0;
reg     [7:0] gtx_encoder1 = 8'd0;
reg           gtx_encoder2 = 1'd0;
reg           gtx_encoder3 = 1'd0;
reg     [9:0] gtx_encoder4 = 10'd0;
reg     [9:0] gtx_encoder5 = 10'd0;
reg           gtx_encoder6 = 1'd0;
reg           gtx_encoder7 = 1'd0;
reg           gtx_encoder_ce0 = 1'd1;
wire          gtx_encoder_ce1;
wire          gtx_encoder_ce2;
reg           gtx_encoder_singleencoder0_alt7_rd0 = 1'd0;
reg           gtx_encoder_singleencoder0_alt7_rd1 = 1'd0;
reg     [3:0] gtx_encoder_singleencoder0_code4b = 4'd0;
reg           gtx_encoder_singleencoder0_code4b_flip = 1'd0;
reg           gtx_encoder_singleencoder0_code4b_unbalanced = 1'd0;
reg     [5:0] gtx_encoder_singleencoder0_code6b = 6'd0;
reg           gtx_encoder_singleencoder0_code6b_flip = 1'd0;
reg           gtx_encoder_singleencoder0_code6b_unbalanced = 1'd0;
wire    [7:0] gtx_encoder_singleencoder0_d;
reg           gtx_encoder_singleencoder0_disp_in = 1'd0;
wire          gtx_encoder_singleencoder0_disp_inter;
reg           gtx_encoder_singleencoder0_disp_out = 1'd0;
wire          gtx_encoder_singleencoder0_k;
reg     [9:0] gtx_encoder_singleencoder0_output = 10'd0;
reg     [3:0] gtx_encoder_singleencoder0_output_4b = 4'd0;
reg     [5:0] gtx_encoder_singleencoder0_output_6b = 6'd0;
wire    [9:0] gtx_encoder_singleencoder0_output_msb_first;
reg           gtx_encoder_singleencoder1_alt7_rd0 = 1'd0;
reg           gtx_encoder_singleencoder1_alt7_rd1 = 1'd0;
reg     [3:0] gtx_encoder_singleencoder1_code4b = 4'd0;
reg           gtx_encoder_singleencoder1_code4b_flip = 1'd0;
reg           gtx_encoder_singleencoder1_code4b_unbalanced = 1'd0;
reg     [5:0] gtx_encoder_singleencoder1_code6b = 6'd0;
reg           gtx_encoder_singleencoder1_code6b_flip = 1'd0;
reg           gtx_encoder_singleencoder1_code6b_unbalanced = 1'd0;
wire    [7:0] gtx_encoder_singleencoder1_d;
wire          gtx_encoder_singleencoder1_disp_in;
wire          gtx_encoder_singleencoder1_disp_inter;
reg           gtx_encoder_singleencoder1_disp_out = 1'd0;
wire          gtx_encoder_singleencoder1_k;
reg     [9:0] gtx_encoder_singleencoder1_output = 10'd0;
reg     [3:0] gtx_encoder_singleencoder1_output_4b = 4'd0;
reg     [5:0] gtx_encoder_singleencoder1_output_6b = 6'd0;
wire    [9:0] gtx_encoder_singleencoder1_output_msb_first;
reg     [2:0] gtx_loopback = 3'd0;
wire    [1:0] gtx_prbsrx_config0;
wire    [1:0] gtx_prbsrx_config1;
reg    [31:0] gtx_prbsrx_errors = 32'd0;
reg    [19:0] gtx_prbsrx_i = 20'd0;
wire   [19:0] gtx_prbsrx_new_prbs_data;
wire          gtx_prbsrx_pause;
reg    [10:0] gtx_prbsrx_prbs15_count = 11'd1024;
wire          gtx_prbsrx_prbs15_done;
reg    [19:0] gtx_prbsrx_prbs15_errors = 20'd0;
wire   [19:0] gtx_prbsrx_prbs15_i;
reg    [19:0] gtx_prbsrx_prbs15_i_last = 20'd0;
reg    [14:0] gtx_prbsrx_prbs15_state = 15'd1;
wire          gtx_prbsrx_prbs15_wait;
reg    [10:0] gtx_prbsrx_prbs31_count = 11'd1024;
wire          gtx_prbsrx_prbs31_done;
reg    [19:0] gtx_prbsrx_prbs31_errors = 20'd0;
wire   [19:0] gtx_prbsrx_prbs31_i;
reg    [19:0] gtx_prbsrx_prbs31_i_last = 20'd0;
reg    [30:0] gtx_prbsrx_prbs31_state = 31'd1;
wire          gtx_prbsrx_prbs31_wait;
reg    [10:0] gtx_prbsrx_prbs7_count = 11'd1024;
wire          gtx_prbsrx_prbs7_done;
reg    [19:0] gtx_prbsrx_prbs7_errors = 20'd0;
wire   [19:0] gtx_prbsrx_prbs7_i;
reg    [19:0] gtx_prbsrx_prbs7_i_last = 20'd0;
reg     [6:0] gtx_prbsrx_prbs7_state = 7'd1;
wire          gtx_prbsrx_prbs7_wait;
wire    [1:0] gtx_prbstx_config0;
wire    [1:0] gtx_prbstx_config1;
wire   [19:0] gtx_prbstx_i;
wire   [19:0] gtx_prbstx_new_prbs_data;
reg    [19:0] gtx_prbstx_o = 20'd0;
reg    [19:0] gtx_prbstx_prbs15_o = 20'd0;
reg    [14:0] gtx_prbstx_prbs15_state = 15'd1;
reg    [19:0] gtx_prbstx_prbs31_o = 20'd0;
reg    [30:0] gtx_prbstx_prbs31_state = 31'd1;
reg    [19:0] gtx_prbstx_prbs7_o = 20'd0;
reg     [6:0] gtx_prbstx_prbs7_state = 7'd1;
reg    [19:0] gtx_prbstx_prbs_data = 20'd0;
reg           gtx_rx_enable = 1'd1;
reg           gtx_rx_init_Xxdlysreset0 = 1'd0;
reg           gtx_rx_init_Xxdlysreset1 = 1'd0;
wire          gtx_rx_init_Xxdlysresetdone0;
wire          gtx_rx_init_Xxdlysresetdone1;
wire          gtx_rx_init_Xxphaligndone0;
wire          gtx_rx_init_Xxphaligndone1;
reg           gtx_rx_init_Xxphaligndone_r = 1'd1;
wire          gtx_rx_init_Xxphaligndone_rising;
wire          gtx_rx_init_Xxresetdone0;
wire          gtx_rx_init_Xxresetdone1;
reg           gtx_rx_init_Xxuserrdy0 = 1'd0;
reg           gtx_rx_init_Xxuserrdy1 = 1'd0;
reg    [10:0] gtx_rx_init_cdr_lock_timer_count = 11'd1024;
wire          gtx_rx_init_cdr_lock_timer_done;
reg           gtx_rx_init_cdr_lock_timer_wait = 1'd0;
reg           gtx_rx_init_done = 1'd0;
reg           gtx_rx_init_drp_done = 1'd1;
reg           gtx_rx_init_drp_start = 1'd0;
reg           gtx_rx_init_gtXxpd0 = 1'd0;
reg           gtx_rx_init_gtXxpd1 = 1'd0;
reg           gtx_rx_init_gtXxreset0 = 1'd0;
reg           gtx_rx_init_gtXxreset1 = 1'd0;
reg     [5:0] gtx_rx_init_init_delay_count = 6'd50;
wire          gtx_rx_init_init_delay_done;
wire          gtx_rx_init_init_delay_wait;
wire          gtx_rx_init_plllock0;
wire          gtx_rx_init_plllock1;
reg           gtx_rx_init_pllreset = 1'd0;
wire          gtx_rx_init_reset;
wire          gtx_rx_init_restart;
reg    [16:0] gtx_rx_init_watchdog_count = 17'd100000;
wire          gtx_rx_init_watchdog_done;
wire          gtx_rx_init_watchdog_wait;
reg     [1:0] gtx_rx_prbs_config0 = 2'd0;
wire    [1:0] gtx_rx_prbs_config1;
wire   [31:0] gtx_rx_prbs_errors0;
wire   [31:0] gtx_rx_prbs_errors1;
reg           gtx_rx_prbs_pause0 = 1'd0;
wire          gtx_rx_prbs_pause1;
wire          gtx_rx_ready;
(* dont_touch = "true" *)
reg           gtx_rx_reset_deglitched = 1'd0;
wire   [19:0] gtx_rxdata;
wire          gtx_rxoutclk;
reg     [3:0] gtx_sel = 4'd0;
reg           gtx_tx_enable = 1'd1;
reg           gtx_tx_inhibit = 1'd0;
reg           gtx_tx_init_Xxdlysreset0 = 1'd0;
reg           gtx_tx_init_Xxdlysreset1 = 1'd0;
wire          gtx_tx_init_Xxdlysresetdone0;
wire          gtx_tx_init_Xxdlysresetdone1;
wire          gtx_tx_init_Xxphaligndone0;
wire          gtx_tx_init_Xxphaligndone1;
reg           gtx_tx_init_Xxphaligndone_r = 1'd1;
wire          gtx_tx_init_Xxphaligndone_rising;
wire          gtx_tx_init_Xxresetdone0;
wire          gtx_tx_init_Xxresetdone1;
reg           gtx_tx_init_Xxuserrdy0 = 1'd0;
reg           gtx_tx_init_Xxuserrdy1 = 1'd0;
reg    [10:0] gtx_tx_init_cdr_lock_timer_count = 11'd1024;
wire          gtx_tx_init_cdr_lock_timer_done;
reg           gtx_tx_init_cdr_lock_timer_wait = 1'd0;
reg           gtx_tx_init_done = 1'd0;
reg           gtx_tx_init_drp_done = 1'd1;
reg           gtx_tx_init_drp_start = 1'd0;
reg           gtx_tx_init_gtXxpd0 = 1'd0;
reg           gtx_tx_init_gtXxpd1 = 1'd0;
reg           gtx_tx_init_gtXxreset0 = 1'd0;
reg           gtx_tx_init_gtXxreset1 = 1'd0;
reg     [5:0] gtx_tx_init_init_delay_count = 6'd50;
wire          gtx_tx_init_init_delay_done;
wire          gtx_tx_init_init_delay_wait;
wire          gtx_tx_init_plllock0;
wire          gtx_tx_init_plllock1;
reg           gtx_tx_init_pllreset = 1'd0;
wire          gtx_tx_init_reset;
wire          gtx_tx_init_restart;
reg    [16:0] gtx_tx_init_watchdog_count = 17'd100000;
wire          gtx_tx_init_watchdog_done;
wire          gtx_tx_init_watchdog_wait;
reg    [19:0] gtx_tx_pattern0 = 20'd0;
wire   [19:0] gtx_tx_pattern1;
reg     [1:0] gtx_tx_prbs_config0 = 2'd0;
wire    [1:0] gtx_tx_prbs_config1;
reg           gtx_tx_produce_pattern0 = 1'd0;
wire          gtx_tx_produce_pattern1;
wire          gtx_tx_produce_square_wave0;
wire          gtx_tx_produce_square_wave1;
wire          gtx_tx_ready;
(* dont_touch = "true" *)
reg           gtx_tx_reset_deglitched = 1'd0;
reg    [19:0] gtx_txdata = 20'd0;
wire          gtx_txoutclk;
wire          gtx_txoutclk_bufg;
reg     [3:0] gtxrxinit_next_state = 4'd0;
reg     [3:0] gtxrxinit_state = 4'd0;
reg     [3:0] gtxtxinit_next_state = 4'd0;
reg     [3:0] gtxtxinit_state = 4'd0;
wire          pll_fb;
wire          pll_locked;
reg           pll_power_down = 1'd0;
wire          pll_reset;
wire          refclk_clk;
wire          refclk_rst;
wire          reset0;
wire          reset1;
wire          reset2;
wire          reset3;
wire          reset4;
wire          reset5;
wire          reset6;
wire          reset7;
reg     [5:0] rhs_self0 = 6'd0;
reg           rhs_self1 = 1'd0;
reg           rhs_self10 = 1'd0;
reg           rhs_self11 = 1'd0;
reg           rhs_self2 = 1'd0;
reg     [3:0] rhs_self3 = 4'd0;
reg           rhs_self4 = 1'd0;
reg           rhs_self5 = 1'd0;
reg     [5:0] rhs_self6 = 6'd0;
reg           rhs_self7 = 1'd0;
reg           rhs_self8 = 1'd0;
reg     [3:0] rhs_self9 = 4'd0;
reg           rst = 1'd0;
(* dont_touch = "true" *)
wire          rx_clk;
wire          rx_rst;
(* dont_touch = "true" *)
wire          sys_clk;
wire          sys_rst;
reg     [2:0] t_self0 = 3'd0;
reg     [2:0] t_self1 = 3'd0;
reg     [2:0] t_self2 = 3'd0;
reg     [2:0] t_self3 = 3'd0;
(* dont_touch = "true" *)
wire          tx_clk;
wire          tx_rst;
wire          xilinxasyncresetsynchronizerimpl0;
wire          xilinxasyncresetsynchronizerimpl0_rst_meta;
wire          xilinxasyncresetsynchronizerimpl1;
wire          xilinxasyncresetsynchronizerimpl1_rst_meta;
wire          xilinxasyncresetsynchronizerimpl2_rst_meta;
wire          xilinxasyncresetsynchronizerimpl3_rst_meta;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl00 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl01 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl10 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl100 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl101 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl11 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl110 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl111 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl120 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl121 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl130 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl131 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl140 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl141 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [1:0] xilinxmultiregimpl150 = 2'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [1:0] xilinxmultiregimpl151 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [1:0] xilinxmultiregimpl160 = 2'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [1:0] xilinxmultiregimpl161 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [19:0] xilinxmultiregimpl20 = 20'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [19:0] xilinxmultiregimpl21 = 20'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [1:0] xilinxmultiregimpl30 = 2'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [1:0] xilinxmultiregimpl31 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [1:0] xilinxmultiregimpl40 = 2'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [1:0] xilinxmultiregimpl41 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl50 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl51 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [31:0] xilinxmultiregimpl60 = 32'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [31:0] xilinxmultiregimpl61 = 32'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl70 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl71 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl80 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl81 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl90 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl91 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign pll_reset = rst;
assign gtx_tx_produce_square_wave0 = 1'd1;
assign user_led0 = counter[24];
assign user_led1 = gpll_lock;
assign user_led2 = 1'd0;
assign user_led3 = 1'd0;
assign sys_clk = clkout_buf0;
assign refclk_clk = clkout_buf1;
assign gtx_tx_ready = gtx_tx_init_done;
assign gtx_tx_init_restart = (~gtx_tx_enable);
assign gtx_rx_ready = gtx_rx_init_done;
assign gtx_rx_init_restart = (~gtx_rx_enable);
assign gtx_tx_init_plllock0 = gpll_lock;
assign gtx_rx_init_plllock0 = gpll_lock;
assign gpll_reset = gtx_tx_init_pllreset;
assign tx_clk = gtx_txoutclk_bufg;
assign gtx_prbstx_config0 = gtx_tx_prbs_config1;
assign gtx_prbstx_i = {gtx_encoder5, gtx_encoder4};
always @(*) begin
    gtx_txdata <= 20'd0;
    if (gtx_tx_produce_square_wave1) begin
        gtx_txdata <= gtx49;
    end else begin
        if (gtx_tx_produce_pattern1) begin
            gtx_txdata <= gtx_tx_pattern1;
        end else begin
            gtx_txdata <= gtx_prbstx_o;
        end
    end
end
assign gtx_prbsrx_config0 = gtx_rx_prbs_config1;
assign gtx_prbsrx_pause = gtx_rx_prbs_pause1;
assign gtx_rx_prbs_errors1 = gtx_prbsrx_errors;
assign gtx_decoder0_input = gtx_rxdata[9:0];
assign gtx_decoder1_input = gtx_rxdata[19:10];
assign gtx_encoder_ce1 = gtx_encoder_ce0;
assign gtx_encoder_ce2 = gtx_encoder_ce0;
assign gtx_encoder_singleencoder1_disp_in = gtx_encoder_singleencoder0_disp_out;
assign gtx_encoder_singleencoder0_d = gtx_encoder0;
assign gtx_encoder_singleencoder0_k = gtx_encoder2;
assign gtx_encoder_singleencoder1_d = gtx_encoder1;
assign gtx_encoder_singleencoder1_k = gtx_encoder3;
assign gtx_encoder_singleencoder0_disp_inter = (gtx_encoder_singleencoder0_disp_in ^ gtx_encoder_singleencoder0_code6b_unbalanced);
always @(*) begin
    gtx_encoder_singleencoder0_output_6b <= 6'd0;
    if (((~gtx_encoder_singleencoder0_disp_in) & gtx_encoder_singleencoder0_code6b_flip)) begin
        gtx_encoder_singleencoder0_output_6b <= (~gtx_encoder_singleencoder0_code6b);
    end else begin
        gtx_encoder_singleencoder0_output_6b <= gtx_encoder_singleencoder0_code6b;
    end
end
always @(*) begin
    gtx_encoder_singleencoder0_disp_out <= 1'd0;
    gtx_encoder_singleencoder0_output_4b <= 4'd0;
    if (((~gtx_encoder_singleencoder0_disp_inter) & gtx_encoder_singleencoder0_alt7_rd0)) begin
        gtx_encoder_singleencoder0_disp_out <= (~gtx_encoder_singleencoder0_disp_inter);
        gtx_encoder_singleencoder0_output_4b <= 3'd7;
    end else begin
        if ((gtx_encoder_singleencoder0_disp_inter & gtx_encoder_singleencoder0_alt7_rd1)) begin
            gtx_encoder_singleencoder0_disp_out <= (~gtx_encoder_singleencoder0_disp_inter);
            gtx_encoder_singleencoder0_output_4b <= 4'd8;
        end else begin
            gtx_encoder_singleencoder0_disp_out <= (gtx_encoder_singleencoder0_disp_inter ^ gtx_encoder_singleencoder0_code4b_unbalanced);
            if (((~gtx_encoder_singleencoder0_disp_inter) & gtx_encoder_singleencoder0_code4b_flip)) begin
                gtx_encoder_singleencoder0_output_4b <= (~gtx_encoder_singleencoder0_code4b);
            end else begin
                gtx_encoder_singleencoder0_output_4b <= gtx_encoder_singleencoder0_code4b;
            end
        end
    end
end
assign gtx_encoder_singleencoder0_output_msb_first = {gtx_encoder_singleencoder0_output_6b, gtx_encoder_singleencoder0_output_4b};
always @(*) begin
    gtx_encoder_singleencoder0_output <= 10'd0;
    gtx_encoder_singleencoder0_output[0] <= gtx_encoder_singleencoder0_output_msb_first[9];
    gtx_encoder_singleencoder0_output[1] <= gtx_encoder_singleencoder0_output_msb_first[8];
    gtx_encoder_singleencoder0_output[2] <= gtx_encoder_singleencoder0_output_msb_first[7];
    gtx_encoder_singleencoder0_output[3] <= gtx_encoder_singleencoder0_output_msb_first[6];
    gtx_encoder_singleencoder0_output[4] <= gtx_encoder_singleencoder0_output_msb_first[5];
    gtx_encoder_singleencoder0_output[5] <= gtx_encoder_singleencoder0_output_msb_first[4];
    gtx_encoder_singleencoder0_output[6] <= gtx_encoder_singleencoder0_output_msb_first[3];
    gtx_encoder_singleencoder0_output[7] <= gtx_encoder_singleencoder0_output_msb_first[2];
    gtx_encoder_singleencoder0_output[8] <= gtx_encoder_singleencoder0_output_msb_first[1];
    gtx_encoder_singleencoder0_output[9] <= gtx_encoder_singleencoder0_output_msb_first[0];
end
assign gtx_encoder_singleencoder1_disp_inter = (gtx_encoder_singleencoder1_disp_in ^ gtx_encoder_singleencoder1_code6b_unbalanced);
always @(*) begin
    gtx_encoder_singleencoder1_output_6b <= 6'd0;
    if (((~gtx_encoder_singleencoder1_disp_in) & gtx_encoder_singleencoder1_code6b_flip)) begin
        gtx_encoder_singleencoder1_output_6b <= (~gtx_encoder_singleencoder1_code6b);
    end else begin
        gtx_encoder_singleencoder1_output_6b <= gtx_encoder_singleencoder1_code6b;
    end
end
always @(*) begin
    gtx_encoder_singleencoder1_disp_out <= 1'd0;
    gtx_encoder_singleencoder1_output_4b <= 4'd0;
    if (((~gtx_encoder_singleencoder1_disp_inter) & gtx_encoder_singleencoder1_alt7_rd0)) begin
        gtx_encoder_singleencoder1_disp_out <= (~gtx_encoder_singleencoder1_disp_inter);
        gtx_encoder_singleencoder1_output_4b <= 3'd7;
    end else begin
        if ((gtx_encoder_singleencoder1_disp_inter & gtx_encoder_singleencoder1_alt7_rd1)) begin
            gtx_encoder_singleencoder1_disp_out <= (~gtx_encoder_singleencoder1_disp_inter);
            gtx_encoder_singleencoder1_output_4b <= 4'd8;
        end else begin
            gtx_encoder_singleencoder1_disp_out <= (gtx_encoder_singleencoder1_disp_inter ^ gtx_encoder_singleencoder1_code4b_unbalanced);
            if (((~gtx_encoder_singleencoder1_disp_inter) & gtx_encoder_singleencoder1_code4b_flip)) begin
                gtx_encoder_singleencoder1_output_4b <= (~gtx_encoder_singleencoder1_code4b);
            end else begin
                gtx_encoder_singleencoder1_output_4b <= gtx_encoder_singleencoder1_code4b;
            end
        end
    end
end
assign gtx_encoder_singleencoder1_output_msb_first = {gtx_encoder_singleencoder1_output_6b, gtx_encoder_singleencoder1_output_4b};
always @(*) begin
    gtx_encoder_singleencoder1_output <= 10'd0;
    gtx_encoder_singleencoder1_output[0] <= gtx_encoder_singleencoder1_output_msb_first[9];
    gtx_encoder_singleencoder1_output[1] <= gtx_encoder_singleencoder1_output_msb_first[8];
    gtx_encoder_singleencoder1_output[2] <= gtx_encoder_singleencoder1_output_msb_first[7];
    gtx_encoder_singleencoder1_output[3] <= gtx_encoder_singleencoder1_output_msb_first[6];
    gtx_encoder_singleencoder1_output[4] <= gtx_encoder_singleencoder1_output_msb_first[5];
    gtx_encoder_singleencoder1_output[5] <= gtx_encoder_singleencoder1_output_msb_first[4];
    gtx_encoder_singleencoder1_output[6] <= gtx_encoder_singleencoder1_output_msb_first[3];
    gtx_encoder_singleencoder1_output[7] <= gtx_encoder_singleencoder1_output_msb_first[2];
    gtx_encoder_singleencoder1_output[8] <= gtx_encoder_singleencoder1_output_msb_first[1];
    gtx_encoder_singleencoder1_output[9] <= gtx_encoder_singleencoder1_output_msb_first[0];
end
always @(*) begin
    gtx_decoder0_input_msb_first <= 10'd0;
    gtx_decoder0_input_msb_first[0] <= gtx_decoder0_input[9];
    gtx_decoder0_input_msb_first[1] <= gtx_decoder0_input[8];
    gtx_decoder0_input_msb_first[2] <= gtx_decoder0_input[7];
    gtx_decoder0_input_msb_first[3] <= gtx_decoder0_input[6];
    gtx_decoder0_input_msb_first[4] <= gtx_decoder0_input[5];
    gtx_decoder0_input_msb_first[5] <= gtx_decoder0_input[4];
    gtx_decoder0_input_msb_first[6] <= gtx_decoder0_input[3];
    gtx_decoder0_input_msb_first[7] <= gtx_decoder0_input[2];
    gtx_decoder0_input_msb_first[8] <= gtx_decoder0_input[1];
    gtx_decoder0_input_msb_first[9] <= gtx_decoder0_input[0];
end
assign gtx_decoder0_adr = gtx_decoder0_input_msb_first[9:4];
assign gtx_decoder0_re = gtx_decoder0_ce;
assign gtx_decoder0_code5b = gtx_decoder0_dat_r;
assign gtx_decoder0_d = {gtx_decoder0_code3b, gtx_decoder0_code5b};
assign gtx_decoder0_invalid = (((gtx_decoder0_ones != 3'd4) & (gtx_decoder0_ones != 3'd5)) & (gtx_decoder0_ones != 3'd6));
always @(*) begin
    gtx_decoder1_input_msb_first <= 10'd0;
    gtx_decoder1_input_msb_first[0] <= gtx_decoder1_input[9];
    gtx_decoder1_input_msb_first[1] <= gtx_decoder1_input[8];
    gtx_decoder1_input_msb_first[2] <= gtx_decoder1_input[7];
    gtx_decoder1_input_msb_first[3] <= gtx_decoder1_input[6];
    gtx_decoder1_input_msb_first[4] <= gtx_decoder1_input[5];
    gtx_decoder1_input_msb_first[5] <= gtx_decoder1_input[4];
    gtx_decoder1_input_msb_first[6] <= gtx_decoder1_input[3];
    gtx_decoder1_input_msb_first[7] <= gtx_decoder1_input[2];
    gtx_decoder1_input_msb_first[8] <= gtx_decoder1_input[1];
    gtx_decoder1_input_msb_first[9] <= gtx_decoder1_input[0];
end
assign gtx_decoder1_adr = gtx_decoder1_input_msb_first[9:4];
assign gtx_decoder1_re = gtx_decoder1_ce;
assign gtx_decoder1_code5b = gtx_decoder1_dat_r;
assign gtx_decoder1_d = {gtx_decoder1_code3b, gtx_decoder1_code5b};
assign gtx_decoder1_invalid = (((gtx_decoder1_ones != 3'd4) & (gtx_decoder1_ones != 3'd5)) & (gtx_decoder1_ones != 3'd6));
assign gtx_tx_init_Xxphaligndone_rising = (gtx_tx_init_Xxphaligndone1 & (~gtx_tx_init_Xxphaligndone_r));
assign gtx_tx_init_init_delay_wait = 1'd1;
assign gtx_tx_init_watchdog_wait = ((~gtx_tx_init_reset) & (~gtx_tx_init_done));
assign gtx_tx_init_reset = (gtx_tx_init_restart | gtx_tx_init_watchdog_done);
always @(*) begin
    gtx_tx_init_Xxdlysreset1 <= 1'd0;
    gtx_tx_init_Xxuserrdy1 <= 1'd0;
    gtx_tx_init_cdr_lock_timer_wait <= 1'd0;
    gtx_tx_init_done <= 1'd0;
    gtx_tx_init_drp_start <= 1'd0;
    gtx_tx_init_gtXxpd1 <= 1'd0;
    gtx_tx_init_gtXxreset1 <= 1'd0;
    gtx_tx_init_pllreset <= 1'd0;
    gtxtxinit_next_state <= 4'd0;
    gtxtxinit_next_state <= gtxtxinit_state;
    case (gtxtxinit_state)
        1'd1: begin
            gtx_tx_init_gtXxreset1 <= 1'd1;
            gtx_tx_init_pllreset <= 1'd1;
            gtx_tx_init_drp_start <= 1'd1;
            if (gtx_tx_init_drp_done) begin
                gtxtxinit_next_state <= 2'd2;
            end
        end
        2'd2: begin
            gtx_tx_init_gtXxreset1 <= 1'd1;
            if (gtx_tx_init_plllock1) begin
                gtxtxinit_next_state <= 2'd3;
            end
        end
        2'd3: begin
            gtx_tx_init_gtXxreset1 <= 1'd1;
            if (gtx_tx_init_init_delay_done) begin
                gtxtxinit_next_state <= 3'd4;
            end
        end
        3'd4: begin
            gtx_tx_init_Xxuserrdy1 <= 1'd1;
            if (gtx_tx_init_Xxresetdone1) begin
                gtxtxinit_next_state <= 3'd5;
            end
        end
        3'd5: begin
            gtx_tx_init_Xxuserrdy1 <= 1'd1;
            gtx_tx_init_cdr_lock_timer_wait <= 1'd1;
            if (gtx_tx_init_cdr_lock_timer_done) begin
                if (1'd1) begin
                    gtxtxinit_next_state <= 4'd10;
                end else begin
                    gtxtxinit_next_state <= 3'd6;
                end
            end
        end
        3'd6: begin
            gtx_tx_init_Xxuserrdy1 <= 1'd1;
            gtx_tx_init_Xxdlysreset1 <= 1'd1;
            gtxtxinit_next_state <= 3'd7;
        end
        3'd7: begin
            gtx_tx_init_Xxuserrdy1 <= 1'd1;
            if (gtx_tx_init_Xxdlysresetdone1) begin
                gtxtxinit_next_state <= 4'd8;
            end
        end
        4'd8: begin
            gtx_tx_init_Xxuserrdy1 <= 1'd1;
            if (gtx_tx_init_Xxphaligndone_rising) begin
                gtxtxinit_next_state <= 4'd9;
            end
        end
        4'd9: begin
            gtx_tx_init_Xxuserrdy1 <= 1'd1;
            if (gtx_tx_init_Xxphaligndone_rising) begin
                gtxtxinit_next_state <= 4'd10;
            end
        end
        4'd10: begin
            gtx_tx_init_Xxuserrdy1 <= 1'd1;
            gtx_tx_init_done <= 1'd1;
            if (gtx_tx_init_restart) begin
                gtxtxinit_next_state <= 1'd0;
            end
        end
        default: begin
            gtx_tx_init_gtXxreset1 <= 1'd1;
            gtx_tx_init_gtXxpd1 <= 1'd1;
            gtx_tx_init_pllreset <= 1'd1;
            gtxtxinit_next_state <= 1'd1;
        end
    endcase
end
assign gtx_tx_init_init_delay_done = (gtx_tx_init_init_delay_count == 1'd0);
assign gtx_tx_init_cdr_lock_timer_done = (gtx_tx_init_cdr_lock_timer_count == 1'd0);
assign gtx_tx_init_watchdog_done = (gtx_tx_init_watchdog_count == 1'd0);
assign gtx_rx_init_Xxphaligndone_rising = (gtx_rx_init_Xxphaligndone1 & (~gtx_rx_init_Xxphaligndone_r));
assign gtx_rx_init_init_delay_wait = 1'd1;
assign gtx_rx_init_watchdog_wait = ((~gtx_rx_init_reset) & (~gtx_rx_init_done));
assign gtx_rx_init_reset = (gtx_rx_init_restart | gtx_rx_init_watchdog_done);
always @(*) begin
    gtx_rx_init_Xxdlysreset1 <= 1'd0;
    gtx_rx_init_Xxuserrdy1 <= 1'd0;
    gtx_rx_init_cdr_lock_timer_wait <= 1'd0;
    gtx_rx_init_done <= 1'd0;
    gtx_rx_init_drp_start <= 1'd0;
    gtx_rx_init_gtXxpd1 <= 1'd0;
    gtx_rx_init_gtXxreset1 <= 1'd0;
    gtx_rx_init_pllreset <= 1'd0;
    gtxrxinit_next_state <= 4'd0;
    gtxrxinit_next_state <= gtxrxinit_state;
    case (gtxrxinit_state)
        1'd1: begin
            gtx_rx_init_gtXxreset1 <= 1'd1;
            gtx_rx_init_pllreset <= 1'd1;
            gtx_rx_init_drp_start <= 1'd1;
            if (gtx_rx_init_drp_done) begin
                gtxrxinit_next_state <= 2'd2;
            end
        end
        2'd2: begin
            gtx_rx_init_gtXxreset1 <= 1'd1;
            if (gtx_rx_init_plllock1) begin
                gtxrxinit_next_state <= 2'd3;
            end
        end
        2'd3: begin
            gtx_rx_init_gtXxreset1 <= 1'd1;
            if (gtx_rx_init_init_delay_done) begin
                gtxrxinit_next_state <= 3'd4;
            end
        end
        3'd4: begin
            gtx_rx_init_Xxuserrdy1 <= 1'd1;
            if (gtx_rx_init_Xxresetdone1) begin
                gtxrxinit_next_state <= 3'd5;
            end
        end
        3'd5: begin
            gtx_rx_init_Xxuserrdy1 <= 1'd1;
            gtx_rx_init_cdr_lock_timer_wait <= 1'd1;
            if (gtx_rx_init_cdr_lock_timer_done) begin
                if (1'd0) begin
                    gtxrxinit_next_state <= 4'd10;
                end else begin
                    gtxrxinit_next_state <= 3'd6;
                end
            end
        end
        3'd6: begin
            gtx_rx_init_Xxuserrdy1 <= 1'd1;
            gtx_rx_init_Xxdlysreset1 <= 1'd1;
            gtxrxinit_next_state <= 3'd7;
        end
        3'd7: begin
            gtx_rx_init_Xxuserrdy1 <= 1'd1;
            if (gtx_rx_init_Xxdlysresetdone1) begin
                gtxrxinit_next_state <= 4'd8;
            end
        end
        4'd8: begin
            gtx_rx_init_Xxuserrdy1 <= 1'd1;
            if (gtx_rx_init_Xxphaligndone_rising) begin
                gtxrxinit_next_state <= 4'd9;
            end
        end
        4'd9: begin
            gtx_rx_init_Xxuserrdy1 <= 1'd1;
            if (gtx_rx_init_Xxphaligndone_rising) begin
                gtxrxinit_next_state <= 4'd10;
            end
        end
        4'd10: begin
            gtx_rx_init_Xxuserrdy1 <= 1'd1;
            gtx_rx_init_done <= 1'd1;
            if (gtx_rx_init_restart) begin
                gtxrxinit_next_state <= 1'd0;
            end
        end
        default: begin
            gtx_rx_init_gtXxreset1 <= 1'd1;
            gtx_rx_init_gtXxpd1 <= 1'd1;
            gtx_rx_init_pllreset <= 1'd1;
            gtxrxinit_next_state <= 1'd1;
        end
    endcase
end
assign gtx_rx_init_init_delay_done = (gtx_rx_init_init_delay_count == 1'd0);
assign gtx_rx_init_cdr_lock_timer_done = (gtx_rx_init_cdr_lock_timer_count == 1'd0);
assign gtx_rx_init_watchdog_done = (gtx_rx_init_watchdog_count == 1'd0);
always @(*) begin
    gtx_drp_do <= 16'd0;
    gtx_drp_mux_addr <= 9'd0;
    gtx_drp_mux_clk <= 1'd0;
    gtx_drp_mux_di <= 16'd0;
    gtx_drp_mux_en <= 1'd0;
    gtx_drp_mux_we <= 1'd0;
    gtx_drp_rdy <= 1'd0;
    case (gtx_sel)
        1'd0: begin
            gtx_drp_mux_clk <= gtx_drp_clk;
            gtx_drp_mux_en <= gtx_drp_en;
            gtx_drp_mux_we <= gtx_drp_we;
            gtx_drp_rdy <= gtx_drp_mux_rdy;
            gtx_drp_mux_addr <= gtx_drp_addr;
            gtx_drp_mux_di <= gtx_drp_di;
            gtx_drp_do <= gtx_drp_mux_do;
        end
    endcase
end
always @(*) begin
    gtx_prbstx_prbs_data <= 20'd0;
    case (gtx_prbstx_config0)
        1'd0: begin
            gtx_prbstx_prbs_data <= 1'd0;
        end
        1'd1: begin
            gtx_prbstx_prbs_data <= gtx_prbstx_prbs7_o;
        end
        2'd2: begin
            gtx_prbstx_prbs_data <= gtx_prbstx_prbs15_o;
        end
        2'd3: begin
            gtx_prbstx_prbs_data <= gtx_prbstx_prbs31_o;
        end
    endcase
end
assign gtx_prbstx_new_prbs_data = {gtx_prbstx_prbs_data[0], gtx_prbstx_prbs_data[1], gtx_prbstx_prbs_data[2], gtx_prbstx_prbs_data[3], gtx_prbstx_prbs_data[4], gtx_prbstx_prbs_data[5], gtx_prbstx_prbs_data[6], gtx_prbstx_prbs_data[7], gtx_prbstx_prbs_data[8], gtx_prbstx_prbs_data[9], gtx_prbstx_prbs_data[10], gtx_prbstx_prbs_data[11], gtx_prbstx_prbs_data[12], gtx_prbstx_prbs_data[13], gtx_prbstx_prbs_data[14], gtx_prbstx_prbs_data[15], gtx_prbstx_prbs_data[16], gtx_prbstx_prbs_data[17], gtx_prbstx_prbs_data[18], gtx_prbstx_prbs_data[19]};
always @(*) begin
    gtx_prbstx_o <= 20'd0;
    gtx_prbstx_o <= gtx_prbstx_i;
    if ((gtx_prbstx_config1 != 1'd0)) begin
        gtx_prbstx_o <= gtx_prbstx_new_prbs_data;
    end
end
assign gtx_prbsrx_new_prbs_data = {gtx_prbsrx_i[0], gtx_prbsrx_i[1], gtx_prbsrx_i[2], gtx_prbsrx_i[3], gtx_prbsrx_i[4], gtx_prbsrx_i[5], gtx_prbsrx_i[6], gtx_prbsrx_i[7], gtx_prbsrx_i[8], gtx_prbsrx_i[9], gtx_prbsrx_i[10], gtx_prbsrx_i[11], gtx_prbsrx_i[12], gtx_prbsrx_i[13], gtx_prbsrx_i[14], gtx_prbsrx_i[15], gtx_prbsrx_i[16], gtx_prbsrx_i[17], gtx_prbsrx_i[18], gtx_prbsrx_i[19]};
assign gtx_prbsrx_prbs7_i = gtx_prbsrx_new_prbs_data;
assign gtx_prbsrx_prbs15_i = gtx_prbsrx_new_prbs_data;
assign gtx_prbsrx_prbs31_i = gtx_prbsrx_new_prbs_data;
assign gtx_prbsrx_prbs7_wait = (gtx_prbsrx_prbs7_i == gtx_prbsrx_prbs7_i_last);
assign gtx_prbsrx_prbs7_done = (gtx_prbsrx_prbs7_count == 1'd0);
assign gtx_prbsrx_prbs15_wait = (gtx_prbsrx_prbs15_i == gtx_prbsrx_prbs15_i_last);
assign gtx_prbsrx_prbs15_done = (gtx_prbsrx_prbs15_count == 1'd0);
assign gtx_prbsrx_prbs31_wait = (gtx_prbsrx_prbs31_i == gtx_prbsrx_prbs31_i_last);
assign gtx_prbsrx_prbs31_done = (gtx_prbsrx_prbs31_count == 1'd0);
always @(*) begin
    t_self0 <= 3'd0;
    case (gtx_decoder0_input_msb_first[3:0])
        1'd0: begin
            t_self0 <= 1'd0;
        end
        1'd1: begin
            t_self0 <= 1'd0;
        end
        2'd2: begin
            t_self0 <= 3'd4;
        end
        2'd3: begin
            t_self0 <= 2'd3;
        end
        3'd4: begin
            t_self0 <= 1'd0;
        end
        3'd5: begin
            t_self0 <= 2'd2;
        end
        3'd6: begin
            t_self0 <= 3'd6;
        end
        3'd7: begin
            t_self0 <= 1'd0;
        end
        4'd8: begin
            t_self0 <= 3'd7;
        end
        4'd9: begin
            t_self0 <= 1'd1;
        end
        4'd10: begin
            t_self0 <= 3'd5;
        end
        4'd11: begin
            t_self0 <= 1'd0;
        end
        4'd12: begin
            t_self0 <= 1'd0;
        end
        4'd13: begin
            t_self0 <= 1'd0;
        end
        4'd14: begin
            t_self0 <= 1'd0;
        end
        default: begin
            t_self0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    t_self1 <= 3'd0;
    case (gtx_decoder0_input_msb_first[3:0])
        1'd0: begin
            t_self1 <= 1'd0;
        end
        1'd1: begin
            t_self1 <= 1'd0;
        end
        2'd2: begin
            t_self1 <= 1'd0;
        end
        2'd3: begin
            t_self1 <= 1'd0;
        end
        3'd4: begin
            t_self1 <= 1'd0;
        end
        3'd5: begin
            t_self1 <= 3'd5;
        end
        3'd6: begin
            t_self1 <= 1'd1;
        end
        3'd7: begin
            t_self1 <= 3'd7;
        end
        4'd8: begin
            t_self1 <= 1'd0;
        end
        4'd9: begin
            t_self1 <= 3'd6;
        end
        4'd10: begin
            t_self1 <= 2'd2;
        end
        4'd11: begin
            t_self1 <= 1'd0;
        end
        4'd12: begin
            t_self1 <= 2'd3;
        end
        4'd13: begin
            t_self1 <= 3'd4;
        end
        4'd14: begin
            t_self1 <= 1'd0;
        end
        default: begin
            t_self1 <= 1'd0;
        end
    endcase
end
always @(*) begin
    f_self0 <= 3'd0;
    case (gtx_decoder0_input_msb_first[3:0])
        1'd0: begin
            f_self0 <= 1'd0;
        end
        1'd1: begin
            f_self0 <= 3'd7;
        end
        2'd2: begin
            f_self0 <= 3'd4;
        end
        2'd3: begin
            f_self0 <= 2'd3;
        end
        3'd4: begin
            f_self0 <= 1'd0;
        end
        3'd5: begin
            f_self0 <= 2'd2;
        end
        3'd6: begin
            f_self0 <= 3'd6;
        end
        3'd7: begin
            f_self0 <= 3'd7;
        end
        4'd8: begin
            f_self0 <= 3'd7;
        end
        4'd9: begin
            f_self0 <= 1'd1;
        end
        4'd10: begin
            f_self0 <= 3'd5;
        end
        4'd11: begin
            f_self0 <= 1'd0;
        end
        4'd12: begin
            f_self0 <= 2'd3;
        end
        4'd13: begin
            f_self0 <= 3'd4;
        end
        4'd14: begin
            f_self0 <= 3'd7;
        end
        default: begin
            f_self0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    t_self2 <= 3'd0;
    case (gtx_decoder1_input_msb_first[3:0])
        1'd0: begin
            t_self2 <= 1'd0;
        end
        1'd1: begin
            t_self2 <= 1'd0;
        end
        2'd2: begin
            t_self2 <= 3'd4;
        end
        2'd3: begin
            t_self2 <= 2'd3;
        end
        3'd4: begin
            t_self2 <= 1'd0;
        end
        3'd5: begin
            t_self2 <= 2'd2;
        end
        3'd6: begin
            t_self2 <= 3'd6;
        end
        3'd7: begin
            t_self2 <= 1'd0;
        end
        4'd8: begin
            t_self2 <= 3'd7;
        end
        4'd9: begin
            t_self2 <= 1'd1;
        end
        4'd10: begin
            t_self2 <= 3'd5;
        end
        4'd11: begin
            t_self2 <= 1'd0;
        end
        4'd12: begin
            t_self2 <= 1'd0;
        end
        4'd13: begin
            t_self2 <= 1'd0;
        end
        4'd14: begin
            t_self2 <= 1'd0;
        end
        default: begin
            t_self2 <= 1'd0;
        end
    endcase
end
always @(*) begin
    t_self3 <= 3'd0;
    case (gtx_decoder1_input_msb_first[3:0])
        1'd0: begin
            t_self3 <= 1'd0;
        end
        1'd1: begin
            t_self3 <= 1'd0;
        end
        2'd2: begin
            t_self3 <= 1'd0;
        end
        2'd3: begin
            t_self3 <= 1'd0;
        end
        3'd4: begin
            t_self3 <= 1'd0;
        end
        3'd5: begin
            t_self3 <= 3'd5;
        end
        3'd6: begin
            t_self3 <= 1'd1;
        end
        3'd7: begin
            t_self3 <= 3'd7;
        end
        4'd8: begin
            t_self3 <= 1'd0;
        end
        4'd9: begin
            t_self3 <= 3'd6;
        end
        4'd10: begin
            t_self3 <= 2'd2;
        end
        4'd11: begin
            t_self3 <= 1'd0;
        end
        4'd12: begin
            t_self3 <= 2'd3;
        end
        4'd13: begin
            t_self3 <= 3'd4;
        end
        4'd14: begin
            t_self3 <= 1'd0;
        end
        default: begin
            t_self3 <= 1'd0;
        end
    endcase
end
always @(*) begin
    f_self1 <= 3'd0;
    case (gtx_decoder1_input_msb_first[3:0])
        1'd0: begin
            f_self1 <= 1'd0;
        end
        1'd1: begin
            f_self1 <= 3'd7;
        end
        2'd2: begin
            f_self1 <= 3'd4;
        end
        2'd3: begin
            f_self1 <= 2'd3;
        end
        3'd4: begin
            f_self1 <= 1'd0;
        end
        3'd5: begin
            f_self1 <= 2'd2;
        end
        3'd6: begin
            f_self1 <= 3'd6;
        end
        3'd7: begin
            f_self1 <= 3'd7;
        end
        4'd8: begin
            f_self1 <= 3'd7;
        end
        4'd9: begin
            f_self1 <= 1'd1;
        end
        4'd10: begin
            f_self1 <= 3'd5;
        end
        4'd11: begin
            f_self1 <= 1'd0;
        end
        4'd12: begin
            f_self1 <= 2'd3;
        end
        4'd13: begin
            f_self1 <= 3'd4;
        end
        4'd14: begin
            f_self1 <= 3'd7;
        end
        default: begin
            f_self1 <= 1'd0;
        end
    endcase
end
always @(*) begin
    rhs_self0 <= 6'd0;
    case (gtx_encoder_singleencoder0_d[4:0])
        1'd0: begin
            rhs_self0 <= 5'd24;
        end
        1'd1: begin
            rhs_self0 <= 6'd34;
        end
        2'd2: begin
            rhs_self0 <= 5'd18;
        end
        2'd3: begin
            rhs_self0 <= 6'd49;
        end
        3'd4: begin
            rhs_self0 <= 4'd10;
        end
        3'd5: begin
            rhs_self0 <= 6'd41;
        end
        3'd6: begin
            rhs_self0 <= 5'd25;
        end
        3'd7: begin
            rhs_self0 <= 3'd7;
        end
        4'd8: begin
            rhs_self0 <= 3'd6;
        end
        4'd9: begin
            rhs_self0 <= 6'd37;
        end
        4'd10: begin
            rhs_self0 <= 5'd21;
        end
        4'd11: begin
            rhs_self0 <= 6'd52;
        end
        4'd12: begin
            rhs_self0 <= 4'd13;
        end
        4'd13: begin
            rhs_self0 <= 6'd44;
        end
        4'd14: begin
            rhs_self0 <= 5'd28;
        end
        4'd15: begin
            rhs_self0 <= 6'd40;
        end
        5'd16: begin
            rhs_self0 <= 6'd36;
        end
        5'd17: begin
            rhs_self0 <= 6'd35;
        end
        5'd18: begin
            rhs_self0 <= 5'd19;
        end
        5'd19: begin
            rhs_self0 <= 6'd50;
        end
        5'd20: begin
            rhs_self0 <= 4'd11;
        end
        5'd21: begin
            rhs_self0 <= 6'd42;
        end
        5'd22: begin
            rhs_self0 <= 5'd26;
        end
        5'd23: begin
            rhs_self0 <= 3'd5;
        end
        5'd24: begin
            rhs_self0 <= 4'd12;
        end
        5'd25: begin
            rhs_self0 <= 6'd38;
        end
        5'd26: begin
            rhs_self0 <= 5'd22;
        end
        5'd27: begin
            rhs_self0 <= 4'd9;
        end
        5'd28: begin
            rhs_self0 <= 4'd14;
        end
        5'd29: begin
            rhs_self0 <= 5'd17;
        end
        5'd30: begin
            rhs_self0 <= 6'd33;
        end
        default: begin
            rhs_self0 <= 5'd20;
        end
    endcase
end
always @(*) begin
    rhs_self1 <= 1'd0;
    case (gtx_encoder_singleencoder0_d[4:0])
        1'd0: begin
            rhs_self1 <= 1'd1;
        end
        1'd1: begin
            rhs_self1 <= 1'd1;
        end
        2'd2: begin
            rhs_self1 <= 1'd1;
        end
        2'd3: begin
            rhs_self1 <= 1'd0;
        end
        3'd4: begin
            rhs_self1 <= 1'd1;
        end
        3'd5: begin
            rhs_self1 <= 1'd0;
        end
        3'd6: begin
            rhs_self1 <= 1'd0;
        end
        3'd7: begin
            rhs_self1 <= 1'd0;
        end
        4'd8: begin
            rhs_self1 <= 1'd1;
        end
        4'd9: begin
            rhs_self1 <= 1'd0;
        end
        4'd10: begin
            rhs_self1 <= 1'd0;
        end
        4'd11: begin
            rhs_self1 <= 1'd0;
        end
        4'd12: begin
            rhs_self1 <= 1'd0;
        end
        4'd13: begin
            rhs_self1 <= 1'd0;
        end
        4'd14: begin
            rhs_self1 <= 1'd0;
        end
        4'd15: begin
            rhs_self1 <= 1'd1;
        end
        5'd16: begin
            rhs_self1 <= 1'd1;
        end
        5'd17: begin
            rhs_self1 <= 1'd0;
        end
        5'd18: begin
            rhs_self1 <= 1'd0;
        end
        5'd19: begin
            rhs_self1 <= 1'd0;
        end
        5'd20: begin
            rhs_self1 <= 1'd0;
        end
        5'd21: begin
            rhs_self1 <= 1'd0;
        end
        5'd22: begin
            rhs_self1 <= 1'd0;
        end
        5'd23: begin
            rhs_self1 <= 1'd1;
        end
        5'd24: begin
            rhs_self1 <= 1'd1;
        end
        5'd25: begin
            rhs_self1 <= 1'd0;
        end
        5'd26: begin
            rhs_self1 <= 1'd0;
        end
        5'd27: begin
            rhs_self1 <= 1'd1;
        end
        5'd28: begin
            rhs_self1 <= 1'd0;
        end
        5'd29: begin
            rhs_self1 <= 1'd1;
        end
        5'd30: begin
            rhs_self1 <= 1'd1;
        end
        default: begin
            rhs_self1 <= 1'd1;
        end
    endcase
end
always @(*) begin
    rhs_self2 <= 1'd0;
    case (gtx_encoder_singleencoder0_d[4:0])
        1'd0: begin
            rhs_self2 <= 1'd1;
        end
        1'd1: begin
            rhs_self2 <= 1'd1;
        end
        2'd2: begin
            rhs_self2 <= 1'd1;
        end
        2'd3: begin
            rhs_self2 <= 1'd0;
        end
        3'd4: begin
            rhs_self2 <= 1'd1;
        end
        3'd5: begin
            rhs_self2 <= 1'd0;
        end
        3'd6: begin
            rhs_self2 <= 1'd0;
        end
        3'd7: begin
            rhs_self2 <= 1'd1;
        end
        4'd8: begin
            rhs_self2 <= 1'd1;
        end
        4'd9: begin
            rhs_self2 <= 1'd0;
        end
        4'd10: begin
            rhs_self2 <= 1'd0;
        end
        4'd11: begin
            rhs_self2 <= 1'd0;
        end
        4'd12: begin
            rhs_self2 <= 1'd0;
        end
        4'd13: begin
            rhs_self2 <= 1'd0;
        end
        4'd14: begin
            rhs_self2 <= 1'd0;
        end
        4'd15: begin
            rhs_self2 <= 1'd1;
        end
        5'd16: begin
            rhs_self2 <= 1'd1;
        end
        5'd17: begin
            rhs_self2 <= 1'd0;
        end
        5'd18: begin
            rhs_self2 <= 1'd0;
        end
        5'd19: begin
            rhs_self2 <= 1'd0;
        end
        5'd20: begin
            rhs_self2 <= 1'd0;
        end
        5'd21: begin
            rhs_self2 <= 1'd0;
        end
        5'd22: begin
            rhs_self2 <= 1'd0;
        end
        5'd23: begin
            rhs_self2 <= 1'd1;
        end
        5'd24: begin
            rhs_self2 <= 1'd1;
        end
        5'd25: begin
            rhs_self2 <= 1'd0;
        end
        5'd26: begin
            rhs_self2 <= 1'd0;
        end
        5'd27: begin
            rhs_self2 <= 1'd1;
        end
        5'd28: begin
            rhs_self2 <= 1'd0;
        end
        5'd29: begin
            rhs_self2 <= 1'd1;
        end
        5'd30: begin
            rhs_self2 <= 1'd1;
        end
        default: begin
            rhs_self2 <= 1'd1;
        end
    endcase
end
always @(*) begin
    rhs_self3 <= 4'd0;
    case (gtx_encoder_singleencoder0_d[7:5])
        1'd0: begin
            rhs_self3 <= 3'd4;
        end
        1'd1: begin
            rhs_self3 <= 4'd9;
        end
        2'd2: begin
            rhs_self3 <= 3'd5;
        end
        2'd3: begin
            rhs_self3 <= 2'd3;
        end
        3'd4: begin
            rhs_self3 <= 2'd2;
        end
        3'd5: begin
            rhs_self3 <= 4'd10;
        end
        3'd6: begin
            rhs_self3 <= 3'd6;
        end
        default: begin
            rhs_self3 <= 1'd1;
        end
    endcase
end
always @(*) begin
    rhs_self4 <= 1'd0;
    case (gtx_encoder_singleencoder0_d[7:5])
        1'd0: begin
            rhs_self4 <= 1'd1;
        end
        1'd1: begin
            rhs_self4 <= 1'd0;
        end
        2'd2: begin
            rhs_self4 <= 1'd0;
        end
        2'd3: begin
            rhs_self4 <= 1'd0;
        end
        3'd4: begin
            rhs_self4 <= 1'd1;
        end
        3'd5: begin
            rhs_self4 <= 1'd0;
        end
        3'd6: begin
            rhs_self4 <= 1'd0;
        end
        default: begin
            rhs_self4 <= 1'd1;
        end
    endcase
end
always @(*) begin
    rhs_self5 <= 1'd0;
    case (gtx_encoder_singleencoder0_d[7:5])
        1'd0: begin
            rhs_self5 <= 1'd1;
        end
        1'd1: begin
            rhs_self5 <= 1'd0;
        end
        2'd2: begin
            rhs_self5 <= 1'd0;
        end
        2'd3: begin
            rhs_self5 <= 1'd1;
        end
        3'd4: begin
            rhs_self5 <= 1'd1;
        end
        3'd5: begin
            rhs_self5 <= 1'd0;
        end
        3'd6: begin
            rhs_self5 <= 1'd0;
        end
        default: begin
            rhs_self5 <= 1'd1;
        end
    endcase
end
always @(*) begin
    rhs_self6 <= 6'd0;
    case (gtx_encoder_singleencoder1_d[4:0])
        1'd0: begin
            rhs_self6 <= 5'd24;
        end
        1'd1: begin
            rhs_self6 <= 6'd34;
        end
        2'd2: begin
            rhs_self6 <= 5'd18;
        end
        2'd3: begin
            rhs_self6 <= 6'd49;
        end
        3'd4: begin
            rhs_self6 <= 4'd10;
        end
        3'd5: begin
            rhs_self6 <= 6'd41;
        end
        3'd6: begin
            rhs_self6 <= 5'd25;
        end
        3'd7: begin
            rhs_self6 <= 3'd7;
        end
        4'd8: begin
            rhs_self6 <= 3'd6;
        end
        4'd9: begin
            rhs_self6 <= 6'd37;
        end
        4'd10: begin
            rhs_self6 <= 5'd21;
        end
        4'd11: begin
            rhs_self6 <= 6'd52;
        end
        4'd12: begin
            rhs_self6 <= 4'd13;
        end
        4'd13: begin
            rhs_self6 <= 6'd44;
        end
        4'd14: begin
            rhs_self6 <= 5'd28;
        end
        4'd15: begin
            rhs_self6 <= 6'd40;
        end
        5'd16: begin
            rhs_self6 <= 6'd36;
        end
        5'd17: begin
            rhs_self6 <= 6'd35;
        end
        5'd18: begin
            rhs_self6 <= 5'd19;
        end
        5'd19: begin
            rhs_self6 <= 6'd50;
        end
        5'd20: begin
            rhs_self6 <= 4'd11;
        end
        5'd21: begin
            rhs_self6 <= 6'd42;
        end
        5'd22: begin
            rhs_self6 <= 5'd26;
        end
        5'd23: begin
            rhs_self6 <= 3'd5;
        end
        5'd24: begin
            rhs_self6 <= 4'd12;
        end
        5'd25: begin
            rhs_self6 <= 6'd38;
        end
        5'd26: begin
            rhs_self6 <= 5'd22;
        end
        5'd27: begin
            rhs_self6 <= 4'd9;
        end
        5'd28: begin
            rhs_self6 <= 4'd14;
        end
        5'd29: begin
            rhs_self6 <= 5'd17;
        end
        5'd30: begin
            rhs_self6 <= 6'd33;
        end
        default: begin
            rhs_self6 <= 5'd20;
        end
    endcase
end
always @(*) begin
    rhs_self7 <= 1'd0;
    case (gtx_encoder_singleencoder1_d[4:0])
        1'd0: begin
            rhs_self7 <= 1'd1;
        end
        1'd1: begin
            rhs_self7 <= 1'd1;
        end
        2'd2: begin
            rhs_self7 <= 1'd1;
        end
        2'd3: begin
            rhs_self7 <= 1'd0;
        end
        3'd4: begin
            rhs_self7 <= 1'd1;
        end
        3'd5: begin
            rhs_self7 <= 1'd0;
        end
        3'd6: begin
            rhs_self7 <= 1'd0;
        end
        3'd7: begin
            rhs_self7 <= 1'd0;
        end
        4'd8: begin
            rhs_self7 <= 1'd1;
        end
        4'd9: begin
            rhs_self7 <= 1'd0;
        end
        4'd10: begin
            rhs_self7 <= 1'd0;
        end
        4'd11: begin
            rhs_self7 <= 1'd0;
        end
        4'd12: begin
            rhs_self7 <= 1'd0;
        end
        4'd13: begin
            rhs_self7 <= 1'd0;
        end
        4'd14: begin
            rhs_self7 <= 1'd0;
        end
        4'd15: begin
            rhs_self7 <= 1'd1;
        end
        5'd16: begin
            rhs_self7 <= 1'd1;
        end
        5'd17: begin
            rhs_self7 <= 1'd0;
        end
        5'd18: begin
            rhs_self7 <= 1'd0;
        end
        5'd19: begin
            rhs_self7 <= 1'd0;
        end
        5'd20: begin
            rhs_self7 <= 1'd0;
        end
        5'd21: begin
            rhs_self7 <= 1'd0;
        end
        5'd22: begin
            rhs_self7 <= 1'd0;
        end
        5'd23: begin
            rhs_self7 <= 1'd1;
        end
        5'd24: begin
            rhs_self7 <= 1'd1;
        end
        5'd25: begin
            rhs_self7 <= 1'd0;
        end
        5'd26: begin
            rhs_self7 <= 1'd0;
        end
        5'd27: begin
            rhs_self7 <= 1'd1;
        end
        5'd28: begin
            rhs_self7 <= 1'd0;
        end
        5'd29: begin
            rhs_self7 <= 1'd1;
        end
        5'd30: begin
            rhs_self7 <= 1'd1;
        end
        default: begin
            rhs_self7 <= 1'd1;
        end
    endcase
end
always @(*) begin
    rhs_self8 <= 1'd0;
    case (gtx_encoder_singleencoder1_d[4:0])
        1'd0: begin
            rhs_self8 <= 1'd1;
        end
        1'd1: begin
            rhs_self8 <= 1'd1;
        end
        2'd2: begin
            rhs_self8 <= 1'd1;
        end
        2'd3: begin
            rhs_self8 <= 1'd0;
        end
        3'd4: begin
            rhs_self8 <= 1'd1;
        end
        3'd5: begin
            rhs_self8 <= 1'd0;
        end
        3'd6: begin
            rhs_self8 <= 1'd0;
        end
        3'd7: begin
            rhs_self8 <= 1'd1;
        end
        4'd8: begin
            rhs_self8 <= 1'd1;
        end
        4'd9: begin
            rhs_self8 <= 1'd0;
        end
        4'd10: begin
            rhs_self8 <= 1'd0;
        end
        4'd11: begin
            rhs_self8 <= 1'd0;
        end
        4'd12: begin
            rhs_self8 <= 1'd0;
        end
        4'd13: begin
            rhs_self8 <= 1'd0;
        end
        4'd14: begin
            rhs_self8 <= 1'd0;
        end
        4'd15: begin
            rhs_self8 <= 1'd1;
        end
        5'd16: begin
            rhs_self8 <= 1'd1;
        end
        5'd17: begin
            rhs_self8 <= 1'd0;
        end
        5'd18: begin
            rhs_self8 <= 1'd0;
        end
        5'd19: begin
            rhs_self8 <= 1'd0;
        end
        5'd20: begin
            rhs_self8 <= 1'd0;
        end
        5'd21: begin
            rhs_self8 <= 1'd0;
        end
        5'd22: begin
            rhs_self8 <= 1'd0;
        end
        5'd23: begin
            rhs_self8 <= 1'd1;
        end
        5'd24: begin
            rhs_self8 <= 1'd1;
        end
        5'd25: begin
            rhs_self8 <= 1'd0;
        end
        5'd26: begin
            rhs_self8 <= 1'd0;
        end
        5'd27: begin
            rhs_self8 <= 1'd1;
        end
        5'd28: begin
            rhs_self8 <= 1'd0;
        end
        5'd29: begin
            rhs_self8 <= 1'd1;
        end
        5'd30: begin
            rhs_self8 <= 1'd1;
        end
        default: begin
            rhs_self8 <= 1'd1;
        end
    endcase
end
always @(*) begin
    rhs_self9 <= 4'd0;
    case (gtx_encoder_singleencoder1_d[7:5])
        1'd0: begin
            rhs_self9 <= 3'd4;
        end
        1'd1: begin
            rhs_self9 <= 4'd9;
        end
        2'd2: begin
            rhs_self9 <= 3'd5;
        end
        2'd3: begin
            rhs_self9 <= 2'd3;
        end
        3'd4: begin
            rhs_self9 <= 2'd2;
        end
        3'd5: begin
            rhs_self9 <= 4'd10;
        end
        3'd6: begin
            rhs_self9 <= 3'd6;
        end
        default: begin
            rhs_self9 <= 1'd1;
        end
    endcase
end
always @(*) begin
    rhs_self10 <= 1'd0;
    case (gtx_encoder_singleencoder1_d[7:5])
        1'd0: begin
            rhs_self10 <= 1'd1;
        end
        1'd1: begin
            rhs_self10 <= 1'd0;
        end
        2'd2: begin
            rhs_self10 <= 1'd0;
        end
        2'd3: begin
            rhs_self10 <= 1'd0;
        end
        3'd4: begin
            rhs_self10 <= 1'd1;
        end
        3'd5: begin
            rhs_self10 <= 1'd0;
        end
        3'd6: begin
            rhs_self10 <= 1'd0;
        end
        default: begin
            rhs_self10 <= 1'd1;
        end
    endcase
end
always @(*) begin
    rhs_self11 <= 1'd0;
    case (gtx_encoder_singleencoder1_d[7:5])
        1'd0: begin
            rhs_self11 <= 1'd1;
        end
        1'd1: begin
            rhs_self11 <= 1'd0;
        end
        2'd2: begin
            rhs_self11 <= 1'd0;
        end
        2'd3: begin
            rhs_self11 <= 1'd1;
        end
        3'd4: begin
            rhs_self11 <= 1'd1;
        end
        3'd5: begin
            rhs_self11 <= 1'd0;
        end
        3'd6: begin
            rhs_self11 <= 1'd0;
        end
        default: begin
            rhs_self11 <= 1'd1;
        end
    endcase
end
assign xilinxasyncresetsynchronizerimpl0 = (~pll_locked);
assign xilinxasyncresetsynchronizerimpl1 = (~pll_locked);
assign gtx_tx_produce_square_wave1 = xilinxmultiregimpl01;
assign gtx_tx_produce_pattern1 = xilinxmultiregimpl11;
assign gtx_tx_pattern1 = xilinxmultiregimpl21;
assign gtx_tx_prbs_config1 = xilinxmultiregimpl31;
assign gtx_rx_prbs_config1 = xilinxmultiregimpl41;
assign gtx_rx_prbs_pause1 = xilinxmultiregimpl51;
assign gtx_rx_prbs_errors0 = xilinxmultiregimpl61;
assign gtx_tx_init_plllock1 = xilinxmultiregimpl71;
assign gtx_tx_init_Xxresetdone1 = xilinxmultiregimpl81;
assign gtx_tx_init_Xxdlysresetdone1 = xilinxmultiregimpl91;
assign gtx_tx_init_Xxphaligndone1 = xilinxmultiregimpl101;
assign gtx_rx_init_plllock1 = xilinxmultiregimpl111;
assign gtx_rx_init_Xxresetdone1 = xilinxmultiregimpl121;
assign gtx_rx_init_Xxdlysresetdone1 = xilinxmultiregimpl131;
assign gtx_rx_init_Xxphaligndone1 = xilinxmultiregimpl141;
assign gtx_prbstx_config1 = xilinxmultiregimpl151;
assign gtx_prbsrx_config1 = xilinxmultiregimpl161;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge rx_clk) begin
    gtx_prbsrx_i <= gtx_rxdata;
    if (gtx_decoder0_ce) begin
        gtx_decoder0_k <= 1'd0;
        if ((gtx_decoder0_input_msb_first[9:4] == 4'd15)) begin
            gtx_decoder0_k <= 1'd1;
            gtx_decoder0_code3b <= t_self0;
        end else begin
            if ((gtx_decoder0_input_msb_first[9:4] == 6'd48)) begin
                gtx_decoder0_k <= 1'd1;
                gtx_decoder0_code3b <= t_self1;
            end else begin
                if (((gtx_decoder0_input_msb_first[3:0] == 3'd7) | (gtx_decoder0_input_msb_first[3:0] == 4'd8))) begin
                    if (((((((gtx_decoder0_input_msb_first[9:4] != 6'd35) & (gtx_decoder0_input_msb_first[9:4] != 5'd19)) & (gtx_decoder0_input_msb_first[9:4] != 4'd11)) & (gtx_decoder0_input_msb_first[9:4] != 6'd52)) & (gtx_decoder0_input_msb_first[9:4] != 6'd44)) & (gtx_decoder0_input_msb_first[9:4] != 5'd28))) begin
                        gtx_decoder0_k <= 1'd1;
                    end
                end
                gtx_decoder0_code3b <= f_self0;
            end
        end
    end
    if (gtx_decoder0_ce) begin
        gtx_decoder0_ones <= (((((((((gtx_decoder0_input[0] + gtx_decoder0_input[1]) + gtx_decoder0_input[2]) + gtx_decoder0_input[3]) + gtx_decoder0_input[4]) + gtx_decoder0_input[5]) + gtx_decoder0_input[6]) + gtx_decoder0_input[7]) + gtx_decoder0_input[8]) + gtx_decoder0_input[9]);
    end
    if (gtx_decoder1_ce) begin
        gtx_decoder1_k <= 1'd0;
        if ((gtx_decoder1_input_msb_first[9:4] == 4'd15)) begin
            gtx_decoder1_k <= 1'd1;
            gtx_decoder1_code3b <= t_self2;
        end else begin
            if ((gtx_decoder1_input_msb_first[9:4] == 6'd48)) begin
                gtx_decoder1_k <= 1'd1;
                gtx_decoder1_code3b <= t_self3;
            end else begin
                if (((gtx_decoder1_input_msb_first[3:0] == 3'd7) | (gtx_decoder1_input_msb_first[3:0] == 4'd8))) begin
                    if (((((((gtx_decoder1_input_msb_first[9:4] != 6'd35) & (gtx_decoder1_input_msb_first[9:4] != 5'd19)) & (gtx_decoder1_input_msb_first[9:4] != 4'd11)) & (gtx_decoder1_input_msb_first[9:4] != 6'd52)) & (gtx_decoder1_input_msb_first[9:4] != 6'd44)) & (gtx_decoder1_input_msb_first[9:4] != 5'd28))) begin
                        gtx_decoder1_k <= 1'd1;
                    end
                end
                gtx_decoder1_code3b <= f_self1;
            end
        end
    end
    if (gtx_decoder1_ce) begin
        gtx_decoder1_ones <= (((((((((gtx_decoder1_input[0] + gtx_decoder1_input[1]) + gtx_decoder1_input[2]) + gtx_decoder1_input[3]) + gtx_decoder1_input[4]) + gtx_decoder1_input[5]) + gtx_decoder1_input[6]) + gtx_decoder1_input[7]) + gtx_decoder1_input[8]) + gtx_decoder1_input[9]);
    end
    if ((gtx_prbsrx_config1 == 1'd0)) begin
        gtx_prbsrx_errors <= 1'd0;
    end else begin
        if (($signed({1'd0, (~gtx_prbsrx_pause)}) & (-1'd1 | $signed({1'd0, (gtx_prbsrx_errors != 32'd4294967295)})))) begin
            if ((gtx_prbsrx_config1 == 1'd1)) begin
                gtx_prbsrx_errors <= (gtx_prbsrx_errors + (gtx_prbsrx_prbs7_errors != 1'd0));
            end
            if ((gtx_prbsrx_config1 == 2'd2)) begin
                gtx_prbsrx_errors <= (gtx_prbsrx_errors + (gtx_prbsrx_prbs15_errors != 1'd0));
            end
            if ((gtx_prbsrx_config1 == 2'd3)) begin
                gtx_prbsrx_errors <= (gtx_prbsrx_errors + (gtx_prbsrx_prbs31_errors != 1'd0));
            end
        end
    end
    gtx_prbsrx_prbs7_errors[19] <= (gtx_prbsrx_prbs7_i[19] != (gtx_prbsrx_prbs7_state[5] ^ gtx_prbsrx_prbs7_state[6]));
    gtx_prbsrx_prbs7_errors[18] <= (gtx_prbsrx_prbs7_i[18] != (gtx_prbsrx_prbs7_state[4] ^ gtx_prbsrx_prbs7_state[5]));
    gtx_prbsrx_prbs7_errors[17] <= (gtx_prbsrx_prbs7_i[17] != (gtx_prbsrx_prbs7_state[3] ^ gtx_prbsrx_prbs7_state[4]));
    gtx_prbsrx_prbs7_errors[16] <= (gtx_prbsrx_prbs7_i[16] != (gtx_prbsrx_prbs7_state[2] ^ gtx_prbsrx_prbs7_state[3]));
    gtx_prbsrx_prbs7_errors[15] <= (gtx_prbsrx_prbs7_i[15] != (gtx_prbsrx_prbs7_state[1] ^ gtx_prbsrx_prbs7_state[2]));
    gtx_prbsrx_prbs7_errors[14] <= (gtx_prbsrx_prbs7_i[14] != (gtx_prbsrx_prbs7_state[0] ^ gtx_prbsrx_prbs7_state[1]));
    gtx_prbsrx_prbs7_errors[13] <= (gtx_prbsrx_prbs7_i[13] != (gtx_prbsrx_prbs7_i[19] ^ gtx_prbsrx_prbs7_state[0]));
    gtx_prbsrx_prbs7_errors[12] <= (gtx_prbsrx_prbs7_i[12] != (gtx_prbsrx_prbs7_i[18] ^ gtx_prbsrx_prbs7_i[19]));
    gtx_prbsrx_prbs7_errors[11] <= (gtx_prbsrx_prbs7_i[11] != (gtx_prbsrx_prbs7_i[17] ^ gtx_prbsrx_prbs7_i[18]));
    gtx_prbsrx_prbs7_errors[10] <= (gtx_prbsrx_prbs7_i[10] != (gtx_prbsrx_prbs7_i[16] ^ gtx_prbsrx_prbs7_i[17]));
    gtx_prbsrx_prbs7_errors[9] <= (gtx_prbsrx_prbs7_i[9] != (gtx_prbsrx_prbs7_i[15] ^ gtx_prbsrx_prbs7_i[16]));
    gtx_prbsrx_prbs7_errors[8] <= (gtx_prbsrx_prbs7_i[8] != (gtx_prbsrx_prbs7_i[14] ^ gtx_prbsrx_prbs7_i[15]));
    gtx_prbsrx_prbs7_errors[7] <= (gtx_prbsrx_prbs7_i[7] != (gtx_prbsrx_prbs7_i[13] ^ gtx_prbsrx_prbs7_i[14]));
    gtx_prbsrx_prbs7_errors[6] <= (gtx_prbsrx_prbs7_i[6] != (gtx_prbsrx_prbs7_i[12] ^ gtx_prbsrx_prbs7_i[13]));
    gtx_prbsrx_prbs7_errors[5] <= (gtx_prbsrx_prbs7_i[5] != (gtx_prbsrx_prbs7_i[11] ^ gtx_prbsrx_prbs7_i[12]));
    gtx_prbsrx_prbs7_errors[4] <= (gtx_prbsrx_prbs7_i[4] != (gtx_prbsrx_prbs7_i[10] ^ gtx_prbsrx_prbs7_i[11]));
    gtx_prbsrx_prbs7_errors[3] <= (gtx_prbsrx_prbs7_i[3] != (gtx_prbsrx_prbs7_i[9] ^ gtx_prbsrx_prbs7_i[10]));
    gtx_prbsrx_prbs7_errors[2] <= (gtx_prbsrx_prbs7_i[2] != (gtx_prbsrx_prbs7_i[8] ^ gtx_prbsrx_prbs7_i[9]));
    gtx_prbsrx_prbs7_errors[1] <= (gtx_prbsrx_prbs7_i[1] != (gtx_prbsrx_prbs7_i[7] ^ gtx_prbsrx_prbs7_i[8]));
    gtx_prbsrx_prbs7_errors[0] <= (gtx_prbsrx_prbs7_i[0] != (gtx_prbsrx_prbs7_i[6] ^ gtx_prbsrx_prbs7_i[7]));
    gtx_prbsrx_prbs7_state <= {gtx_prbsrx_prbs7_i[6], gtx_prbsrx_prbs7_i[5], gtx_prbsrx_prbs7_i[4], gtx_prbsrx_prbs7_i[3], gtx_prbsrx_prbs7_i[2], gtx_prbsrx_prbs7_i[1], gtx_prbsrx_prbs7_i[0]};
    gtx_prbsrx_prbs7_i_last <= gtx_prbsrx_prbs7_i;
    if (gtx_prbsrx_prbs7_done) begin
        gtx_prbsrx_prbs7_errors <= 20'd1048575;
    end
    if (gtx_prbsrx_prbs7_wait) begin
        if ((~gtx_prbsrx_prbs7_done)) begin
            gtx_prbsrx_prbs7_count <= (gtx_prbsrx_prbs7_count - 1'd1);
        end
    end else begin
        gtx_prbsrx_prbs7_count <= 11'd1024;
    end
    gtx_prbsrx_prbs15_errors[19] <= (gtx_prbsrx_prbs15_i[19] != (gtx_prbsrx_prbs15_state[13] ^ gtx_prbsrx_prbs15_state[14]));
    gtx_prbsrx_prbs15_errors[18] <= (gtx_prbsrx_prbs15_i[18] != (gtx_prbsrx_prbs15_state[12] ^ gtx_prbsrx_prbs15_state[13]));
    gtx_prbsrx_prbs15_errors[17] <= (gtx_prbsrx_prbs15_i[17] != (gtx_prbsrx_prbs15_state[11] ^ gtx_prbsrx_prbs15_state[12]));
    gtx_prbsrx_prbs15_errors[16] <= (gtx_prbsrx_prbs15_i[16] != (gtx_prbsrx_prbs15_state[10] ^ gtx_prbsrx_prbs15_state[11]));
    gtx_prbsrx_prbs15_errors[15] <= (gtx_prbsrx_prbs15_i[15] != (gtx_prbsrx_prbs15_state[9] ^ gtx_prbsrx_prbs15_state[10]));
    gtx_prbsrx_prbs15_errors[14] <= (gtx_prbsrx_prbs15_i[14] != (gtx_prbsrx_prbs15_state[8] ^ gtx_prbsrx_prbs15_state[9]));
    gtx_prbsrx_prbs15_errors[13] <= (gtx_prbsrx_prbs15_i[13] != (gtx_prbsrx_prbs15_state[7] ^ gtx_prbsrx_prbs15_state[8]));
    gtx_prbsrx_prbs15_errors[12] <= (gtx_prbsrx_prbs15_i[12] != (gtx_prbsrx_prbs15_state[6] ^ gtx_prbsrx_prbs15_state[7]));
    gtx_prbsrx_prbs15_errors[11] <= (gtx_prbsrx_prbs15_i[11] != (gtx_prbsrx_prbs15_state[5] ^ gtx_prbsrx_prbs15_state[6]));
    gtx_prbsrx_prbs15_errors[10] <= (gtx_prbsrx_prbs15_i[10] != (gtx_prbsrx_prbs15_state[4] ^ gtx_prbsrx_prbs15_state[5]));
    gtx_prbsrx_prbs15_errors[9] <= (gtx_prbsrx_prbs15_i[9] != (gtx_prbsrx_prbs15_state[3] ^ gtx_prbsrx_prbs15_state[4]));
    gtx_prbsrx_prbs15_errors[8] <= (gtx_prbsrx_prbs15_i[8] != (gtx_prbsrx_prbs15_state[2] ^ gtx_prbsrx_prbs15_state[3]));
    gtx_prbsrx_prbs15_errors[7] <= (gtx_prbsrx_prbs15_i[7] != (gtx_prbsrx_prbs15_state[1] ^ gtx_prbsrx_prbs15_state[2]));
    gtx_prbsrx_prbs15_errors[6] <= (gtx_prbsrx_prbs15_i[6] != (gtx_prbsrx_prbs15_state[0] ^ gtx_prbsrx_prbs15_state[1]));
    gtx_prbsrx_prbs15_errors[5] <= (gtx_prbsrx_prbs15_i[5] != (gtx_prbsrx_prbs15_i[19] ^ gtx_prbsrx_prbs15_state[0]));
    gtx_prbsrx_prbs15_errors[4] <= (gtx_prbsrx_prbs15_i[4] != (gtx_prbsrx_prbs15_i[18] ^ gtx_prbsrx_prbs15_i[19]));
    gtx_prbsrx_prbs15_errors[3] <= (gtx_prbsrx_prbs15_i[3] != (gtx_prbsrx_prbs15_i[17] ^ gtx_prbsrx_prbs15_i[18]));
    gtx_prbsrx_prbs15_errors[2] <= (gtx_prbsrx_prbs15_i[2] != (gtx_prbsrx_prbs15_i[16] ^ gtx_prbsrx_prbs15_i[17]));
    gtx_prbsrx_prbs15_errors[1] <= (gtx_prbsrx_prbs15_i[1] != (gtx_prbsrx_prbs15_i[15] ^ gtx_prbsrx_prbs15_i[16]));
    gtx_prbsrx_prbs15_errors[0] <= (gtx_prbsrx_prbs15_i[0] != (gtx_prbsrx_prbs15_i[14] ^ gtx_prbsrx_prbs15_i[15]));
    gtx_prbsrx_prbs15_state <= {gtx_prbsrx_prbs15_i[14], gtx_prbsrx_prbs15_i[13], gtx_prbsrx_prbs15_i[12], gtx_prbsrx_prbs15_i[11], gtx_prbsrx_prbs15_i[10], gtx_prbsrx_prbs15_i[9], gtx_prbsrx_prbs15_i[8], gtx_prbsrx_prbs15_i[7], gtx_prbsrx_prbs15_i[6], gtx_prbsrx_prbs15_i[5], gtx_prbsrx_prbs15_i[4], gtx_prbsrx_prbs15_i[3], gtx_prbsrx_prbs15_i[2], gtx_prbsrx_prbs15_i[1], gtx_prbsrx_prbs15_i[0]};
    gtx_prbsrx_prbs15_i_last <= gtx_prbsrx_prbs15_i;
    if (gtx_prbsrx_prbs15_done) begin
        gtx_prbsrx_prbs15_errors <= 20'd1048575;
    end
    if (gtx_prbsrx_prbs15_wait) begin
        if ((~gtx_prbsrx_prbs15_done)) begin
            gtx_prbsrx_prbs15_count <= (gtx_prbsrx_prbs15_count - 1'd1);
        end
    end else begin
        gtx_prbsrx_prbs15_count <= 11'd1024;
    end
    gtx_prbsrx_prbs31_errors[19] <= (gtx_prbsrx_prbs31_i[19] != (gtx_prbsrx_prbs31_state[27] ^ gtx_prbsrx_prbs31_state[30]));
    gtx_prbsrx_prbs31_errors[18] <= (gtx_prbsrx_prbs31_i[18] != (gtx_prbsrx_prbs31_state[26] ^ gtx_prbsrx_prbs31_state[29]));
    gtx_prbsrx_prbs31_errors[17] <= (gtx_prbsrx_prbs31_i[17] != (gtx_prbsrx_prbs31_state[25] ^ gtx_prbsrx_prbs31_state[28]));
    gtx_prbsrx_prbs31_errors[16] <= (gtx_prbsrx_prbs31_i[16] != (gtx_prbsrx_prbs31_state[24] ^ gtx_prbsrx_prbs31_state[27]));
    gtx_prbsrx_prbs31_errors[15] <= (gtx_prbsrx_prbs31_i[15] != (gtx_prbsrx_prbs31_state[23] ^ gtx_prbsrx_prbs31_state[26]));
    gtx_prbsrx_prbs31_errors[14] <= (gtx_prbsrx_prbs31_i[14] != (gtx_prbsrx_prbs31_state[22] ^ gtx_prbsrx_prbs31_state[25]));
    gtx_prbsrx_prbs31_errors[13] <= (gtx_prbsrx_prbs31_i[13] != (gtx_prbsrx_prbs31_state[21] ^ gtx_prbsrx_prbs31_state[24]));
    gtx_prbsrx_prbs31_errors[12] <= (gtx_prbsrx_prbs31_i[12] != (gtx_prbsrx_prbs31_state[20] ^ gtx_prbsrx_prbs31_state[23]));
    gtx_prbsrx_prbs31_errors[11] <= (gtx_prbsrx_prbs31_i[11] != (gtx_prbsrx_prbs31_state[19] ^ gtx_prbsrx_prbs31_state[22]));
    gtx_prbsrx_prbs31_errors[10] <= (gtx_prbsrx_prbs31_i[10] != (gtx_prbsrx_prbs31_state[18] ^ gtx_prbsrx_prbs31_state[21]));
    gtx_prbsrx_prbs31_errors[9] <= (gtx_prbsrx_prbs31_i[9] != (gtx_prbsrx_prbs31_state[17] ^ gtx_prbsrx_prbs31_state[20]));
    gtx_prbsrx_prbs31_errors[8] <= (gtx_prbsrx_prbs31_i[8] != (gtx_prbsrx_prbs31_state[16] ^ gtx_prbsrx_prbs31_state[19]));
    gtx_prbsrx_prbs31_errors[7] <= (gtx_prbsrx_prbs31_i[7] != (gtx_prbsrx_prbs31_state[15] ^ gtx_prbsrx_prbs31_state[18]));
    gtx_prbsrx_prbs31_errors[6] <= (gtx_prbsrx_prbs31_i[6] != (gtx_prbsrx_prbs31_state[14] ^ gtx_prbsrx_prbs31_state[17]));
    gtx_prbsrx_prbs31_errors[5] <= (gtx_prbsrx_prbs31_i[5] != (gtx_prbsrx_prbs31_state[13] ^ gtx_prbsrx_prbs31_state[16]));
    gtx_prbsrx_prbs31_errors[4] <= (gtx_prbsrx_prbs31_i[4] != (gtx_prbsrx_prbs31_state[12] ^ gtx_prbsrx_prbs31_state[15]));
    gtx_prbsrx_prbs31_errors[3] <= (gtx_prbsrx_prbs31_i[3] != (gtx_prbsrx_prbs31_state[11] ^ gtx_prbsrx_prbs31_state[14]));
    gtx_prbsrx_prbs31_errors[2] <= (gtx_prbsrx_prbs31_i[2] != (gtx_prbsrx_prbs31_state[10] ^ gtx_prbsrx_prbs31_state[13]));
    gtx_prbsrx_prbs31_errors[1] <= (gtx_prbsrx_prbs31_i[1] != (gtx_prbsrx_prbs31_state[9] ^ gtx_prbsrx_prbs31_state[12]));
    gtx_prbsrx_prbs31_errors[0] <= (gtx_prbsrx_prbs31_i[0] != (gtx_prbsrx_prbs31_state[8] ^ gtx_prbsrx_prbs31_state[11]));
    gtx_prbsrx_prbs31_state <= {gtx_prbsrx_prbs31_state[10], gtx_prbsrx_prbs31_state[9], gtx_prbsrx_prbs31_state[8], gtx_prbsrx_prbs31_state[7], gtx_prbsrx_prbs31_state[6], gtx_prbsrx_prbs31_state[5], gtx_prbsrx_prbs31_state[4], gtx_prbsrx_prbs31_state[3], gtx_prbsrx_prbs31_state[2], gtx_prbsrx_prbs31_state[1], gtx_prbsrx_prbs31_state[0], gtx_prbsrx_prbs31_i[19], gtx_prbsrx_prbs31_i[18], gtx_prbsrx_prbs31_i[17], gtx_prbsrx_prbs31_i[16], gtx_prbsrx_prbs31_i[15], gtx_prbsrx_prbs31_i[14], gtx_prbsrx_prbs31_i[13], gtx_prbsrx_prbs31_i[12], gtx_prbsrx_prbs31_i[11], gtx_prbsrx_prbs31_i[10], gtx_prbsrx_prbs31_i[9], gtx_prbsrx_prbs31_i[8], gtx_prbsrx_prbs31_i[7], gtx_prbsrx_prbs31_i[6], gtx_prbsrx_prbs31_i[5], gtx_prbsrx_prbs31_i[4], gtx_prbsrx_prbs31_i[3], gtx_prbsrx_prbs31_i[2], gtx_prbsrx_prbs31_i[1], gtx_prbsrx_prbs31_i[0]};
    gtx_prbsrx_prbs31_i_last <= gtx_prbsrx_prbs31_i;
    if (gtx_prbsrx_prbs31_done) begin
        gtx_prbsrx_prbs31_errors <= 20'd1048575;
    end
    if (gtx_prbsrx_prbs31_wait) begin
        if ((~gtx_prbsrx_prbs31_done)) begin
            gtx_prbsrx_prbs31_count <= (gtx_prbsrx_prbs31_count - 1'd1);
        end
    end else begin
        gtx_prbsrx_prbs31_count <= 11'd1024;
    end
    if (rx_rst) begin
        gtx_decoder0_k <= 1'd0;
        gtx_decoder1_k <= 1'd0;
        gtx_prbsrx_i <= 20'd0;
        gtx_prbsrx_errors <= 32'd0;
        gtx_prbsrx_prbs7_errors <= 20'd0;
        gtx_prbsrx_prbs7_state <= 7'd1;
        gtx_prbsrx_prbs7_i_last <= 20'd0;
        gtx_prbsrx_prbs7_count <= 11'd1024;
        gtx_prbsrx_prbs15_errors <= 20'd0;
        gtx_prbsrx_prbs15_state <= 15'd1;
        gtx_prbsrx_prbs15_i_last <= 20'd0;
        gtx_prbsrx_prbs15_count <= 11'd1024;
        gtx_prbsrx_prbs31_errors <= 20'd0;
        gtx_prbsrx_prbs31_state <= 31'd1;
        gtx_prbsrx_prbs31_i_last <= 20'd0;
        gtx_prbsrx_prbs31_count <= 11'd1024;
    end
    xilinxmultiregimpl40 <= gtx_rx_prbs_config0;
    xilinxmultiregimpl41 <= xilinxmultiregimpl40;
    xilinxmultiregimpl50 <= gtx_rx_prbs_pause0;
    xilinxmultiregimpl51 <= xilinxmultiregimpl50;
    xilinxmultiregimpl160 <= gtx_prbsrx_config0;
    xilinxmultiregimpl161 <= xilinxmultiregimpl160;
end

always @(posedge sys_clk) begin
    gtx_tx_reset_deglitched <= (~gtx_tx_init_done);
    gtx_tx_init_Xxphaligndone_r <= gtx_tx_init_Xxphaligndone1;
    gtx_tx_init_gtXxreset0 <= gtx_tx_init_gtXxreset1;
    gtx_tx_init_gtXxpd0 <= gtx_tx_init_gtXxpd1;
    gtx_tx_init_Xxdlysreset0 <= gtx_tx_init_Xxdlysreset1;
    gtx_tx_init_Xxuserrdy0 <= gtx_tx_init_Xxuserrdy1;
    gtxtxinit_state <= gtxtxinit_next_state;
    if (gtx_tx_init_reset) begin
        gtxtxinit_state <= 4'd0;
    end
    if (gtx_tx_init_init_delay_wait) begin
        if ((~gtx_tx_init_init_delay_done)) begin
            gtx_tx_init_init_delay_count <= (gtx_tx_init_init_delay_count - 1'd1);
        end
    end else begin
        gtx_tx_init_init_delay_count <= 6'd50;
    end
    if (gtx_tx_init_cdr_lock_timer_wait) begin
        if ((~gtx_tx_init_cdr_lock_timer_done)) begin
            gtx_tx_init_cdr_lock_timer_count <= (gtx_tx_init_cdr_lock_timer_count - 1'd1);
        end
    end else begin
        gtx_tx_init_cdr_lock_timer_count <= 11'd1024;
    end
    if (gtx_tx_init_watchdog_wait) begin
        if ((~gtx_tx_init_watchdog_done)) begin
            gtx_tx_init_watchdog_count <= (gtx_tx_init_watchdog_count - 1'd1);
        end
    end else begin
        gtx_tx_init_watchdog_count <= 17'd100000;
    end
    gtx_rx_init_Xxphaligndone_r <= gtx_rx_init_Xxphaligndone1;
    gtx_rx_init_gtXxreset0 <= gtx_rx_init_gtXxreset1;
    gtx_rx_init_gtXxpd0 <= gtx_rx_init_gtXxpd1;
    gtx_rx_init_Xxdlysreset0 <= gtx_rx_init_Xxdlysreset1;
    gtx_rx_init_Xxuserrdy0 <= gtx_rx_init_Xxuserrdy1;
    gtxrxinit_state <= gtxrxinit_next_state;
    if (gtx_rx_init_reset) begin
        gtxrxinit_state <= 4'd0;
    end
    if (gtx_rx_init_init_delay_wait) begin
        if ((~gtx_rx_init_init_delay_done)) begin
            gtx_rx_init_init_delay_count <= (gtx_rx_init_init_delay_count - 1'd1);
        end
    end else begin
        gtx_rx_init_init_delay_count <= 6'd50;
    end
    if (gtx_rx_init_cdr_lock_timer_wait) begin
        if ((~gtx_rx_init_cdr_lock_timer_done)) begin
            gtx_rx_init_cdr_lock_timer_count <= (gtx_rx_init_cdr_lock_timer_count - 1'd1);
        end
    end else begin
        gtx_rx_init_cdr_lock_timer_count <= 11'd1024;
    end
    if (gtx_rx_init_watchdog_wait) begin
        if ((~gtx_rx_init_watchdog_done)) begin
            gtx_rx_init_watchdog_count <= (gtx_rx_init_watchdog_count - 1'd1);
        end
    end else begin
        gtx_rx_init_watchdog_count <= 17'd100000;
    end
    if (sys_rst) begin
        gtx_tx_init_gtXxreset0 <= 1'd0;
        gtx_tx_init_gtXxpd0 <= 1'd0;
        gtx_tx_init_Xxdlysreset0 <= 1'd0;
        gtx_tx_init_Xxuserrdy0 <= 1'd0;
        gtx_tx_init_Xxphaligndone_r <= 1'd1;
        gtx_tx_init_init_delay_count <= 6'd50;
        gtx_tx_init_cdr_lock_timer_count <= 11'd1024;
        gtx_tx_init_watchdog_count <= 17'd100000;
        gtx_rx_init_gtXxreset0 <= 1'd0;
        gtx_rx_init_gtXxpd0 <= 1'd0;
        gtx_rx_init_Xxdlysreset0 <= 1'd0;
        gtx_rx_init_Xxuserrdy0 <= 1'd0;
        gtx_rx_init_Xxphaligndone_r <= 1'd1;
        gtx_rx_init_init_delay_count <= 6'd50;
        gtx_rx_init_cdr_lock_timer_count <= 11'd1024;
        gtx_rx_init_watchdog_count <= 17'd100000;
        gtx_tx_reset_deglitched <= 1'd0;
        gtxtxinit_state <= 4'd0;
        gtxrxinit_state <= 4'd0;
    end
    xilinxmultiregimpl60 <= gtx_rx_prbs_errors1;
    xilinxmultiregimpl61 <= xilinxmultiregimpl60;
    xilinxmultiregimpl70 <= gtx_tx_init_plllock0;
    xilinxmultiregimpl71 <= xilinxmultiregimpl70;
    xilinxmultiregimpl80 <= gtx_tx_init_Xxresetdone0;
    xilinxmultiregimpl81 <= xilinxmultiregimpl80;
    xilinxmultiregimpl90 <= gtx_tx_init_Xxdlysresetdone0;
    xilinxmultiregimpl91 <= xilinxmultiregimpl90;
    xilinxmultiregimpl100 <= gtx_tx_init_Xxphaligndone0;
    xilinxmultiregimpl101 <= xilinxmultiregimpl100;
    xilinxmultiregimpl110 <= gtx_rx_init_plllock0;
    xilinxmultiregimpl111 <= xilinxmultiregimpl110;
    xilinxmultiregimpl120 <= gtx_rx_init_Xxresetdone0;
    xilinxmultiregimpl121 <= xilinxmultiregimpl120;
    xilinxmultiregimpl130 <= gtx_rx_init_Xxdlysresetdone0;
    xilinxmultiregimpl131 <= xilinxmultiregimpl130;
    xilinxmultiregimpl140 <= gtx_rx_init_Xxphaligndone0;
    xilinxmultiregimpl141 <= xilinxmultiregimpl140;
end

always @(posedge tx_clk) begin
    counter <= (counter + 1'd1);
    gtx_rx_reset_deglitched <= (~gtx_rx_init_done);
    if (gtx_encoder_ce0) begin
        gtx_encoder_singleencoder0_disp_in <= gtx_encoder_singleencoder1_disp_out;
    end
    if (gtx_encoder_ce0) begin
        gtx_encoder4 <= gtx_encoder_singleencoder0_output;
        gtx_encoder6 <= gtx_encoder_singleencoder0_disp_out;
    end
    if (gtx_encoder_ce0) begin
        gtx_encoder5 <= gtx_encoder_singleencoder1_output;
        gtx_encoder7 <= gtx_encoder_singleencoder1_disp_out;
    end
    if (gtx_encoder_ce1) begin
        if ((gtx_encoder_singleencoder0_k & (gtx_encoder_singleencoder0_d[4:0] == 5'd28))) begin
            gtx_encoder_singleencoder0_code6b <= 6'd48;
            gtx_encoder_singleencoder0_code6b_unbalanced <= 1'd1;
            gtx_encoder_singleencoder0_code6b_flip <= 1'd1;
        end else begin
            gtx_encoder_singleencoder0_code6b <= rhs_self0;
            gtx_encoder_singleencoder0_code6b_unbalanced <= rhs_self1;
            gtx_encoder_singleencoder0_code6b_flip <= rhs_self2;
        end
        gtx_encoder_singleencoder0_code4b <= rhs_self3;
        gtx_encoder_singleencoder0_code4b_unbalanced <= rhs_self4;
        if (gtx_encoder_singleencoder0_k) begin
            gtx_encoder_singleencoder0_code4b_flip <= 1'd1;
        end else begin
            gtx_encoder_singleencoder0_code4b_flip <= rhs_self5;
        end
        gtx_encoder_singleencoder0_alt7_rd0 <= 1'd0;
        gtx_encoder_singleencoder0_alt7_rd1 <= 1'd0;
        if ((gtx_encoder_singleencoder0_d[7:5] == 3'd7)) begin
            if ((((gtx_encoder_singleencoder0_d[4:0] == 5'd17) | (gtx_encoder_singleencoder0_d[4:0] == 5'd18)) | (gtx_encoder_singleencoder0_d[4:0] == 5'd20))) begin
                gtx_encoder_singleencoder0_alt7_rd0 <= 1'd1;
            end
            if ((((gtx_encoder_singleencoder0_d[4:0] == 4'd11) | (gtx_encoder_singleencoder0_d[4:0] == 4'd13)) | (gtx_encoder_singleencoder0_d[4:0] == 4'd14))) begin
                gtx_encoder_singleencoder0_alt7_rd1 <= 1'd1;
            end
            if (gtx_encoder_singleencoder0_k) begin
                gtx_encoder_singleencoder0_alt7_rd0 <= 1'd1;
                gtx_encoder_singleencoder0_alt7_rd1 <= 1'd1;
            end
        end
    end
    if (gtx_encoder_ce2) begin
        if ((gtx_encoder_singleencoder1_k & (gtx_encoder_singleencoder1_d[4:0] == 5'd28))) begin
            gtx_encoder_singleencoder1_code6b <= 6'd48;
            gtx_encoder_singleencoder1_code6b_unbalanced <= 1'd1;
            gtx_encoder_singleencoder1_code6b_flip <= 1'd1;
        end else begin
            gtx_encoder_singleencoder1_code6b <= rhs_self6;
            gtx_encoder_singleencoder1_code6b_unbalanced <= rhs_self7;
            gtx_encoder_singleencoder1_code6b_flip <= rhs_self8;
        end
        gtx_encoder_singleencoder1_code4b <= rhs_self9;
        gtx_encoder_singleencoder1_code4b_unbalanced <= rhs_self10;
        if (gtx_encoder_singleencoder1_k) begin
            gtx_encoder_singleencoder1_code4b_flip <= 1'd1;
        end else begin
            gtx_encoder_singleencoder1_code4b_flip <= rhs_self11;
        end
        gtx_encoder_singleencoder1_alt7_rd0 <= 1'd0;
        gtx_encoder_singleencoder1_alt7_rd1 <= 1'd0;
        if ((gtx_encoder_singleencoder1_d[7:5] == 3'd7)) begin
            if ((((gtx_encoder_singleencoder1_d[4:0] == 5'd17) | (gtx_encoder_singleencoder1_d[4:0] == 5'd18)) | (gtx_encoder_singleencoder1_d[4:0] == 5'd20))) begin
                gtx_encoder_singleencoder1_alt7_rd0 <= 1'd1;
            end
            if ((((gtx_encoder_singleencoder1_d[4:0] == 4'd11) | (gtx_encoder_singleencoder1_d[4:0] == 4'd13)) | (gtx_encoder_singleencoder1_d[4:0] == 4'd14))) begin
                gtx_encoder_singleencoder1_alt7_rd1 <= 1'd1;
            end
            if (gtx_encoder_singleencoder1_k) begin
                gtx_encoder_singleencoder1_alt7_rd0 <= 1'd1;
                gtx_encoder_singleencoder1_alt7_rd1 <= 1'd1;
            end
        end
    end
    gtx_prbstx_prbs7_state <= {(((gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5]) ^ (gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6])) ^ ((gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]) ^ gtx_prbstx_prbs7_state[0])), (((gtx_prbstx_prbs7_state[3] ^ gtx_prbstx_prbs7_state[4]) ^ (gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5])) ^ ((gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5]) ^ (gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]))), (((gtx_prbstx_prbs7_state[2] ^ gtx_prbstx_prbs7_state[3]) ^ (gtx_prbstx_prbs7_state[3] ^ gtx_prbstx_prbs7_state[4])) ^ ((gtx_prbstx_prbs7_state[3] ^ gtx_prbstx_prbs7_state[4]) ^ (gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5]))), (((gtx_prbstx_prbs7_state[1] ^ gtx_prbstx_prbs7_state[2]) ^ (gtx_prbstx_prbs7_state[2] ^ gtx_prbstx_prbs7_state[3])) ^ ((gtx_prbstx_prbs7_state[2] ^ gtx_prbstx_prbs7_state[3]) ^ (gtx_prbstx_prbs7_state[3] ^ gtx_prbstx_prbs7_state[4]))), (((gtx_prbstx_prbs7_state[0] ^ gtx_prbstx_prbs7_state[1]) ^ (gtx_prbstx_prbs7_state[1] ^ gtx_prbstx_prbs7_state[2])) ^ ((gtx_prbstx_prbs7_state[1] ^ gtx_prbstx_prbs7_state[2]) ^ (gtx_prbstx_prbs7_state[2] ^ gtx_prbstx_prbs7_state[3]))), ((((gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]) ^ gtx_prbstx_prbs7_state[0]) ^ (gtx_prbstx_prbs7_state[0] ^ gtx_prbstx_prbs7_state[1])) ^ ((gtx_prbstx_prbs7_state[0] ^ gtx_prbstx_prbs7_state[1]) ^ (gtx_prbstx_prbs7_state[1] ^ gtx_prbstx_prbs7_state[2]))), ((((gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5]) ^ (gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6])) ^ ((gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]) ^ gtx_prbstx_prbs7_state[0])) ^ (((gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]) ^ gtx_prbstx_prbs7_state[0]) ^ (gtx_prbstx_prbs7_state[0] ^ gtx_prbstx_prbs7_state[1])))};
    gtx_prbstx_prbs7_o <= {(gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]), (gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5]), (gtx_prbstx_prbs7_state[3] ^ gtx_prbstx_prbs7_state[4]), (gtx_prbstx_prbs7_state[2] ^ gtx_prbstx_prbs7_state[3]), (gtx_prbstx_prbs7_state[1] ^ gtx_prbstx_prbs7_state[2]), (gtx_prbstx_prbs7_state[0] ^ gtx_prbstx_prbs7_state[1]), ((gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]) ^ gtx_prbstx_prbs7_state[0]), ((gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5]) ^ (gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6])), ((gtx_prbstx_prbs7_state[3] ^ gtx_prbstx_prbs7_state[4]) ^ (gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5])), ((gtx_prbstx_prbs7_state[2] ^ gtx_prbstx_prbs7_state[3]) ^ (gtx_prbstx_prbs7_state[3] ^ gtx_prbstx_prbs7_state[4])), ((gtx_prbstx_prbs7_state[1] ^ gtx_prbstx_prbs7_state[2]) ^ (gtx_prbstx_prbs7_state[2] ^ gtx_prbstx_prbs7_state[3])), ((gtx_prbstx_prbs7_state[0] ^ gtx_prbstx_prbs7_state[1]) ^ (gtx_prbstx_prbs7_state[1] ^ gtx_prbstx_prbs7_state[2])), (((gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]) ^ gtx_prbstx_prbs7_state[0]) ^ (gtx_prbstx_prbs7_state[0] ^ gtx_prbstx_prbs7_state[1])), (((gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5]) ^ (gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6])) ^ ((gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]) ^ gtx_prbstx_prbs7_state[0])), (((gtx_prbstx_prbs7_state[3] ^ gtx_prbstx_prbs7_state[4]) ^ (gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5])) ^ ((gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5]) ^ (gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]))), (((gtx_prbstx_prbs7_state[2] ^ gtx_prbstx_prbs7_state[3]) ^ (gtx_prbstx_prbs7_state[3] ^ gtx_prbstx_prbs7_state[4])) ^ ((gtx_prbstx_prbs7_state[3] ^ gtx_prbstx_prbs7_state[4]) ^ (gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5]))), (((gtx_prbstx_prbs7_state[1] ^ gtx_prbstx_prbs7_state[2]) ^ (gtx_prbstx_prbs7_state[2] ^ gtx_prbstx_prbs7_state[3])) ^ ((gtx_prbstx_prbs7_state[2] ^ gtx_prbstx_prbs7_state[3]) ^ (gtx_prbstx_prbs7_state[3] ^ gtx_prbstx_prbs7_state[4]))), (((gtx_prbstx_prbs7_state[0] ^ gtx_prbstx_prbs7_state[1]) ^ (gtx_prbstx_prbs7_state[1] ^ gtx_prbstx_prbs7_state[2])) ^ ((gtx_prbstx_prbs7_state[1] ^ gtx_prbstx_prbs7_state[2]) ^ (gtx_prbstx_prbs7_state[2] ^ gtx_prbstx_prbs7_state[3]))), ((((gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]) ^ gtx_prbstx_prbs7_state[0]) ^ (gtx_prbstx_prbs7_state[0] ^ gtx_prbstx_prbs7_state[1])) ^ ((gtx_prbstx_prbs7_state[0] ^ gtx_prbstx_prbs7_state[1]) ^ (gtx_prbstx_prbs7_state[1] ^ gtx_prbstx_prbs7_state[2]))), ((((gtx_prbstx_prbs7_state[4] ^ gtx_prbstx_prbs7_state[5]) ^ (gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6])) ^ ((gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]) ^ gtx_prbstx_prbs7_state[0])) ^ (((gtx_prbstx_prbs7_state[5] ^ gtx_prbstx_prbs7_state[6]) ^ gtx_prbstx_prbs7_state[0]) ^ (gtx_prbstx_prbs7_state[0] ^ gtx_prbstx_prbs7_state[1])))};
    gtx_prbstx_prbs15_state <= {(gtx_prbstx_prbs15_state[8] ^ gtx_prbstx_prbs15_state[9]), (gtx_prbstx_prbs15_state[7] ^ gtx_prbstx_prbs15_state[8]), (gtx_prbstx_prbs15_state[6] ^ gtx_prbstx_prbs15_state[7]), (gtx_prbstx_prbs15_state[5] ^ gtx_prbstx_prbs15_state[6]), (gtx_prbstx_prbs15_state[4] ^ gtx_prbstx_prbs15_state[5]), (gtx_prbstx_prbs15_state[3] ^ gtx_prbstx_prbs15_state[4]), (gtx_prbstx_prbs15_state[2] ^ gtx_prbstx_prbs15_state[3]), (gtx_prbstx_prbs15_state[1] ^ gtx_prbstx_prbs15_state[2]), (gtx_prbstx_prbs15_state[0] ^ gtx_prbstx_prbs15_state[1]), ((gtx_prbstx_prbs15_state[13] ^ gtx_prbstx_prbs15_state[14]) ^ gtx_prbstx_prbs15_state[0]), ((gtx_prbstx_prbs15_state[12] ^ gtx_prbstx_prbs15_state[13]) ^ (gtx_prbstx_prbs15_state[13] ^ gtx_prbstx_prbs15_state[14])), ((gtx_prbstx_prbs15_state[11] ^ gtx_prbstx_prbs15_state[12]) ^ (gtx_prbstx_prbs15_state[12] ^ gtx_prbstx_prbs15_state[13])), ((gtx_prbstx_prbs15_state[10] ^ gtx_prbstx_prbs15_state[11]) ^ (gtx_prbstx_prbs15_state[11] ^ gtx_prbstx_prbs15_state[12])), ((gtx_prbstx_prbs15_state[9] ^ gtx_prbstx_prbs15_state[10]) ^ (gtx_prbstx_prbs15_state[10] ^ gtx_prbstx_prbs15_state[11])), ((gtx_prbstx_prbs15_state[8] ^ gtx_prbstx_prbs15_state[9]) ^ (gtx_prbstx_prbs15_state[9] ^ gtx_prbstx_prbs15_state[10]))};
    gtx_prbstx_prbs15_o <= {(gtx_prbstx_prbs15_state[13] ^ gtx_prbstx_prbs15_state[14]), (gtx_prbstx_prbs15_state[12] ^ gtx_prbstx_prbs15_state[13]), (gtx_prbstx_prbs15_state[11] ^ gtx_prbstx_prbs15_state[12]), (gtx_prbstx_prbs15_state[10] ^ gtx_prbstx_prbs15_state[11]), (gtx_prbstx_prbs15_state[9] ^ gtx_prbstx_prbs15_state[10]), (gtx_prbstx_prbs15_state[8] ^ gtx_prbstx_prbs15_state[9]), (gtx_prbstx_prbs15_state[7] ^ gtx_prbstx_prbs15_state[8]), (gtx_prbstx_prbs15_state[6] ^ gtx_prbstx_prbs15_state[7]), (gtx_prbstx_prbs15_state[5] ^ gtx_prbstx_prbs15_state[6]), (gtx_prbstx_prbs15_state[4] ^ gtx_prbstx_prbs15_state[5]), (gtx_prbstx_prbs15_state[3] ^ gtx_prbstx_prbs15_state[4]), (gtx_prbstx_prbs15_state[2] ^ gtx_prbstx_prbs15_state[3]), (gtx_prbstx_prbs15_state[1] ^ gtx_prbstx_prbs15_state[2]), (gtx_prbstx_prbs15_state[0] ^ gtx_prbstx_prbs15_state[1]), ((gtx_prbstx_prbs15_state[13] ^ gtx_prbstx_prbs15_state[14]) ^ gtx_prbstx_prbs15_state[0]), ((gtx_prbstx_prbs15_state[12] ^ gtx_prbstx_prbs15_state[13]) ^ (gtx_prbstx_prbs15_state[13] ^ gtx_prbstx_prbs15_state[14])), ((gtx_prbstx_prbs15_state[11] ^ gtx_prbstx_prbs15_state[12]) ^ (gtx_prbstx_prbs15_state[12] ^ gtx_prbstx_prbs15_state[13])), ((gtx_prbstx_prbs15_state[10] ^ gtx_prbstx_prbs15_state[11]) ^ (gtx_prbstx_prbs15_state[11] ^ gtx_prbstx_prbs15_state[12])), ((gtx_prbstx_prbs15_state[9] ^ gtx_prbstx_prbs15_state[10]) ^ (gtx_prbstx_prbs15_state[10] ^ gtx_prbstx_prbs15_state[11])), ((gtx_prbstx_prbs15_state[8] ^ gtx_prbstx_prbs15_state[9]) ^ (gtx_prbstx_prbs15_state[9] ^ gtx_prbstx_prbs15_state[10]))};
    gtx_prbstx_prbs31_state <= {gtx_prbstx_prbs31_state[10], gtx_prbstx_prbs31_state[9], gtx_prbstx_prbs31_state[8], gtx_prbstx_prbs31_state[7], gtx_prbstx_prbs31_state[6], gtx_prbstx_prbs31_state[5], gtx_prbstx_prbs31_state[4], gtx_prbstx_prbs31_state[3], gtx_prbstx_prbs31_state[2], gtx_prbstx_prbs31_state[1], gtx_prbstx_prbs31_state[0], (gtx_prbstx_prbs31_state[27] ^ gtx_prbstx_prbs31_state[30]), (gtx_prbstx_prbs31_state[26] ^ gtx_prbstx_prbs31_state[29]), (gtx_prbstx_prbs31_state[25] ^ gtx_prbstx_prbs31_state[28]), (gtx_prbstx_prbs31_state[24] ^ gtx_prbstx_prbs31_state[27]), (gtx_prbstx_prbs31_state[23] ^ gtx_prbstx_prbs31_state[26]), (gtx_prbstx_prbs31_state[22] ^ gtx_prbstx_prbs31_state[25]), (gtx_prbstx_prbs31_state[21] ^ gtx_prbstx_prbs31_state[24]), (gtx_prbstx_prbs31_state[20] ^ gtx_prbstx_prbs31_state[23]), (gtx_prbstx_prbs31_state[19] ^ gtx_prbstx_prbs31_state[22]), (gtx_prbstx_prbs31_state[18] ^ gtx_prbstx_prbs31_state[21]), (gtx_prbstx_prbs31_state[17] ^ gtx_prbstx_prbs31_state[20]), (gtx_prbstx_prbs31_state[16] ^ gtx_prbstx_prbs31_state[19]), (gtx_prbstx_prbs31_state[15] ^ gtx_prbstx_prbs31_state[18]), (gtx_prbstx_prbs31_state[14] ^ gtx_prbstx_prbs31_state[17]), (gtx_prbstx_prbs31_state[13] ^ gtx_prbstx_prbs31_state[16]), (gtx_prbstx_prbs31_state[12] ^ gtx_prbstx_prbs31_state[15]), (gtx_prbstx_prbs31_state[11] ^ gtx_prbstx_prbs31_state[14]), (gtx_prbstx_prbs31_state[10] ^ gtx_prbstx_prbs31_state[13]), (gtx_prbstx_prbs31_state[9] ^ gtx_prbstx_prbs31_state[12]), (gtx_prbstx_prbs31_state[8] ^ gtx_prbstx_prbs31_state[11])};
    gtx_prbstx_prbs31_o <= {gtx_prbstx_prbs31_state[10], gtx_prbstx_prbs31_state[9], gtx_prbstx_prbs31_state[8], gtx_prbstx_prbs31_state[7], gtx_prbstx_prbs31_state[6], gtx_prbstx_prbs31_state[5], gtx_prbstx_prbs31_state[4], gtx_prbstx_prbs31_state[3], gtx_prbstx_prbs31_state[2], gtx_prbstx_prbs31_state[1], gtx_prbstx_prbs31_state[0], (gtx_prbstx_prbs31_state[27] ^ gtx_prbstx_prbs31_state[30]), (gtx_prbstx_prbs31_state[26] ^ gtx_prbstx_prbs31_state[29]), (gtx_prbstx_prbs31_state[25] ^ gtx_prbstx_prbs31_state[28]), (gtx_prbstx_prbs31_state[24] ^ gtx_prbstx_prbs31_state[27]), (gtx_prbstx_prbs31_state[23] ^ gtx_prbstx_prbs31_state[26]), (gtx_prbstx_prbs31_state[22] ^ gtx_prbstx_prbs31_state[25]), (gtx_prbstx_prbs31_state[21] ^ gtx_prbstx_prbs31_state[24]), (gtx_prbstx_prbs31_state[20] ^ gtx_prbstx_prbs31_state[23]), (gtx_prbstx_prbs31_state[19] ^ gtx_prbstx_prbs31_state[22]), (gtx_prbstx_prbs31_state[18] ^ gtx_prbstx_prbs31_state[21]), (gtx_prbstx_prbs31_state[17] ^ gtx_prbstx_prbs31_state[20]), (gtx_prbstx_prbs31_state[16] ^ gtx_prbstx_prbs31_state[19]), (gtx_prbstx_prbs31_state[15] ^ gtx_prbstx_prbs31_state[18]), (gtx_prbstx_prbs31_state[14] ^ gtx_prbstx_prbs31_state[17]), (gtx_prbstx_prbs31_state[13] ^ gtx_prbstx_prbs31_state[16]), (gtx_prbstx_prbs31_state[12] ^ gtx_prbstx_prbs31_state[15]), (gtx_prbstx_prbs31_state[11] ^ gtx_prbstx_prbs31_state[14]), (gtx_prbstx_prbs31_state[10] ^ gtx_prbstx_prbs31_state[13]), (gtx_prbstx_prbs31_state[9] ^ gtx_prbstx_prbs31_state[12]), (gtx_prbstx_prbs31_state[8] ^ gtx_prbstx_prbs31_state[11])};
    if (tx_rst) begin
        gtx_encoder6 <= 1'd0;
        gtx_encoder7 <= 1'd0;
        gtx_encoder_singleencoder0_disp_in <= 1'd0;
        gtx_encoder_singleencoder0_code6b_flip <= 1'd0;
        gtx_encoder_singleencoder0_code4b_flip <= 1'd0;
        gtx_encoder_singleencoder1_code6b_flip <= 1'd0;
        gtx_encoder_singleencoder1_code4b_flip <= 1'd0;
        gtx_rx_reset_deglitched <= 1'd0;
        gtx_prbstx_prbs7_o <= 20'd0;
        gtx_prbstx_prbs7_state <= 7'd1;
        gtx_prbstx_prbs15_o <= 20'd0;
        gtx_prbstx_prbs15_state <= 15'd1;
        gtx_prbstx_prbs31_o <= 20'd0;
        gtx_prbstx_prbs31_state <= 31'd1;
        counter <= 32'd0;
    end
    xilinxmultiregimpl00 <= gtx_tx_produce_square_wave0;
    xilinxmultiregimpl01 <= xilinxmultiregimpl00;
    xilinxmultiregimpl10 <= gtx_tx_produce_pattern0;
    xilinxmultiregimpl11 <= xilinxmultiregimpl10;
    xilinxmultiregimpl20 <= gtx_tx_pattern0;
    xilinxmultiregimpl21 <= xilinxmultiregimpl20;
    xilinxmultiregimpl30 <= gtx_tx_prbs_config0;
    xilinxmultiregimpl31 <= xilinxmultiregimpl30;
    xilinxmultiregimpl150 <= gtx_prbstx_config0;
    xilinxmultiregimpl151 <= xilinxmultiregimpl150;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Instance BUFG of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG(
	// Inputs.
	.I (clkout0),

	// Outputs.
	.O (clkout_buf0)
);

//------------------------------------------------------------------------------
// Instance BUFG_1 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_1(
	// Inputs.
	.I (clkout1),

	// Outputs.
	.O (clkout_buf1)
);

//------------------------------------------------------------------------------
// Instance GTXE2_COMMON of GTXE2_COMMON Module.
//------------------------------------------------------------------------------
GTXE2_COMMON #(
	// Parameters.
	.QPLL_CFG         (23'd6816193),
	.QPLL_FBDIV       (8'd224),
	.QPLL_FBDIV_RATIO (1'd1),
	.QPLL_REFCLK_DIV  (1'd1)
) GTXE2_COMMON (
	// Inputs.
	.DRPADDR       (gpll_drp_addr),
	.DRPCLK        (gpll_drp_clk),
	.DRPDI         (gpll_drp_di),
	.DRPEN         (gpll_drp_en),
	.DRPWE         (gpll_drp_we),
	.GTREFCLK0     (refclk_clk),
	.QPLLLOCKEN    (1'd1),
	.QPLLPD        (gpll_powerdown),
	.QPLLREFCLKSEL (1'd1),
	.QPLLRESET     (gpll_reset),

	// Outputs.
	.DRPDO         (gpll_drp_do),
	.DRPRDY        (gpll_drp_rdy),
	.QPLLLOCK      (gpll_lock),
	.QPLLOUTCLK    (gpll_clk),
	.QPLLOUTREFCLK (gpll_refclk)
);

//------------------------------------------------------------------------------
// Memory mem_6b5b: 64-words x 5-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [4:0] mem_6b5b[0:63];
initial begin
	$readmemh("top_mem_6b5b.init", mem_6b5b);
end
reg [5:0] mem_6b5b_adr0;
always @(posedge rx_clk) begin
	if (gtx_decoder0_re)
		mem_6b5b_adr0 <= gtx_decoder0_adr;
end
assign gtx_decoder0_dat_r = mem_6b5b[mem_6b5b_adr0];


//------------------------------------------------------------------------------
// Memory mem_6b5b_1: 64-words x 5-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [4:0] mem_6b5b_1[0:63];
initial begin
	$readmemh("top_mem_6b5b_1.init", mem_6b5b_1);
end
reg [5:0] mem_6b5b_1_adr0;
always @(posedge rx_clk) begin
	if (gtx_decoder1_re)
		mem_6b5b_1_adr0 <= gtx_decoder1_adr;
end
assign gtx_decoder1_dat_r = mem_6b5b_1[mem_6b5b_1_adr0];


//------------------------------------------------------------------------------
// Instance BUFG_2 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_2(
	// Inputs.
	.I (gtx_txoutclk),

	// Outputs.
	.O (gtx_txoutclk_bufg)
);

//------------------------------------------------------------------------------
// Instance BUFG_3 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_3(
	// Inputs.
	.I (gtx_rxoutclk),

	// Outputs.
	.O (rx_clk)
);

//------------------------------------------------------------------------------
// Instance FDCE of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE(
	// Inputs.
	.C   (clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (pll_reset),

	// Outputs.
	.Q   (reset0)
);

//------------------------------------------------------------------------------
// Instance FDCE_1 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_1(
	// Inputs.
	.C   (clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset0),

	// Outputs.
	.Q   (reset1)
);

//------------------------------------------------------------------------------
// Instance FDCE_2 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_2(
	// Inputs.
	.C   (clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset1),

	// Outputs.
	.Q   (reset2)
);

//------------------------------------------------------------------------------
// Instance FDCE_3 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_3(
	// Inputs.
	.C   (clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset2),

	// Outputs.
	.Q   (reset3)
);

//------------------------------------------------------------------------------
// Instance FDCE_4 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_4(
	// Inputs.
	.C   (clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset3),

	// Outputs.
	.Q   (reset4)
);

//------------------------------------------------------------------------------
// Instance FDCE_5 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_5(
	// Inputs.
	.C   (clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset4),

	// Outputs.
	.Q   (reset5)
);

//------------------------------------------------------------------------------
// Instance FDCE_6 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_6(
	// Inputs.
	.C   (clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset5),

	// Outputs.
	.Q   (reset6)
);

//------------------------------------------------------------------------------
// Instance FDCE_7 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_7(
	// Inputs.
	.C   (clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset6),

	// Outputs.
	.Q   (reset7)
);

//------------------------------------------------------------------------------
// Instance PLLE2_ADV of PLLE2_ADV Module.
//------------------------------------------------------------------------------
PLLE2_ADV #(
	// Parameters.
	.CLKFBOUT_MULT  (3'd5),
	.CLKIN1_PERIOD  (5.0),
	.CLKOUT0_DIVIDE (4'd10),
	.CLKOUT0_PHASE  (1'd0),
	.CLKOUT1_DIVIDE (4'd8),
	.CLKOUT1_PHASE  (1'd0),
	.DIVCLK_DIVIDE  (1'd1),
	.REF_JITTER1    (0.01),
	.STARTUP_WAIT   ("FALSE")
) PLLE2_ADV (
	// Inputs.
	.CLKFBIN  (pll_fb),
	.CLKIN1   (clkin),
	.PWRDWN   (pll_power_down),
	.RST      (reset7),

	// Outputs.
	.CLKFBOUT (pll_fb),
	.CLKOUT0  (clkout0),
	.CLKOUT1  (clkout1),
	.LOCKED   (pll_locked)
);

//------------------------------------------------------------------------------
// Instance GTXE2_CHANNEL of GTXE2_CHANNEL Module.
//------------------------------------------------------------------------------
GTXE2_CHANNEL #(
	// Parameters.
	.ALIGN_COMMA_DOUBLE           ("FALSE"),
	.ALIGN_COMMA_ENABLE           (10'd1023),
	.ALIGN_COMMA_WORD             (2'd2),
	.ALIGN_MCOMMA_DET             ("TRUE"),
	.ALIGN_MCOMMA_VALUE           (10'd643),
	.ALIGN_PCOMMA_DET             ("TRUE"),
	.ALIGN_PCOMMA_VALUE           (9'd380),
	.CBCC_DATA_SOURCE_SEL         ("DECODED"),
	.CHAN_BOND_KEEP_ALIGN         ("FALSE"),
	.CHAN_BOND_MAX_SKEW           (1'd1),
	.CHAN_BOND_SEQ_1_1            (1'd0),
	.CHAN_BOND_SEQ_1_2            (1'd0),
	.CHAN_BOND_SEQ_1_3            (1'd0),
	.CHAN_BOND_SEQ_1_4            (1'd0),
	.CHAN_BOND_SEQ_1_ENABLE       (4'd15),
	.CHAN_BOND_SEQ_2_1            (1'd0),
	.CHAN_BOND_SEQ_2_2            (1'd0),
	.CHAN_BOND_SEQ_2_3            (1'd0),
	.CHAN_BOND_SEQ_2_4            (1'd0),
	.CHAN_BOND_SEQ_2_ENABLE       (4'd15),
	.CHAN_BOND_SEQ_2_USE          ("FALSE"),
	.CHAN_BOND_SEQ_LEN            (1'd1),
	.CLK_CORRECT_USE              ("FALSE"),
	.CLK_COR_KEEP_IDLE            ("FALSE"),
	.CLK_COR_MAX_LAT              (4'd9),
	.CLK_COR_MIN_LAT              (3'd7),
	.CLK_COR_PRECEDENCE           ("TRUE"),
	.CLK_COR_REPEAT_WAIT          (1'd0),
	.CLK_COR_SEQ_1_1              (9'd256),
	.CLK_COR_SEQ_1_2              (1'd0),
	.CLK_COR_SEQ_1_3              (1'd0),
	.CLK_COR_SEQ_1_4              (1'd0),
	.CLK_COR_SEQ_1_ENABLE         (4'd15),
	.CLK_COR_SEQ_2_1              (9'd256),
	.CLK_COR_SEQ_2_2              (1'd0),
	.CLK_COR_SEQ_2_3              (1'd0),
	.CLK_COR_SEQ_2_4              (1'd0),
	.CLK_COR_SEQ_2_ENABLE         (4'd15),
	.CLK_COR_SEQ_2_USE            ("FALSE"),
	.CLK_COR_SEQ_LEN              (1'd1),
	.CPLL_CFG                     (24'd12322780),
	.CPLL_FBDIV                   (1'd1),
	.CPLL_FBDIV_45                (3'd4),
	.CPLL_INIT_CFG                (5'd30),
	.CPLL_LOCK_CFG                (9'd488),
	.CPLL_REFCLK_DIV              (1'd1),
	.DEC_MCOMMA_DETECT            ("TRUE"),
	.DEC_PCOMMA_DETECT            ("TRUE"),
	.DEC_VALID_COMMA_ONLY         ("TRUE"),
	.DMONITOR_CFG                 (12'd2560),
	.ES_CONTROL                   (1'd0),
	.ES_ERRDET_EN                 ("FALSE"),
	.ES_EYE_SCAN_EN               ("TRUE"),
	.ES_HORZ_OFFSET               (1'd0),
	.ES_PMA_CFG                   (1'd0),
	.ES_PRESCALE                  (1'd0),
	.ES_QUALIFIER                 (1'd0),
	.ES_QUAL_MASK                 (1'd0),
	.ES_SDATA_MASK                (1'd0),
	.ES_VERT_OFFSET               (1'd0),
	.FTS_DESKEW_SEQ_ENABLE        (4'd15),
	.FTS_LANE_DESKEW_CFG          (4'd15),
	.FTS_LANE_DESKEW_EN           ("FALSE"),
	.GEARBOX_MODE                 (1'd0),
	.OUTREFCLK_SEL_INV            (2'd3),
	.PCS_PCIE_EN                  ("FALSE"),
	.PCS_RSVD_ATTR                (1'd0),
	.PD_TRANS_TIME_FROM_P2        (6'd60),
	.PD_TRANS_TIME_NONE_P2        (6'd60),
	.PD_TRANS_TIME_TO_P2          (7'd100),
	.PMA_RSV                      (21'd1994880),
	.PMA_RSV2                     (14'd8272),
	.PMA_RSV3                     (1'd0),
	.PMA_RSV4                     (1'd0),
	.RXBUFRESET_TIME              (1'd1),
	.RXBUF_ADDR_MODE              ("FAST"),
	.RXBUF_EIDLE_HI_CNT           (4'd8),
	.RXBUF_EIDLE_LO_CNT           (1'd0),
	.RXBUF_EN                     ("FALSE"),
	.RXBUF_RESET_ON_CB_CHANGE     ("TRUE"),
	.RXBUF_RESET_ON_COMMAALIGN    ("FALSE"),
	.RXBUF_RESET_ON_EIDLE         ("FALSE"),
	.RXBUF_RESET_ON_RATE_CHANGE   ("TRUE"),
	.RXBUF_THRESH_OVFLW           (6'd61),
	.RXBUF_THRESH_OVRD            ("FALSE"),
	.RXBUF_THRESH_UNDFLW          (3'd4),
	.RXCDRFREQRESET_TIME          (1'd1),
	.RXCDRPHRESET_TIME            (1'd1),
	.RXCDR_CFG                    (66'd55340271799521247264),
	.RXCDR_FR_RESET_ON_EIDLE      (1'd0),
	.RXCDR_HOLD_DURING_EIDLE      (1'd0),
	.RXCDR_LOCK_CFG               (5'd21),
	.RXCDR_PH_RESET_ON_EIDLE      (1'd0),
	.RXDFELPMRESET_TIME           (4'd15),
	.RXDLY_CFG                    (5'd31),
	.RXDLY_LCFG                   (6'd48),
	.RXDLY_TAP_CFG                (1'd0),
	.RXGEARBOX_EN                 ("FALSE"),
	.RXISCANRESET_TIME            (1'd1),
	.RXLPM_HF_CFG                 (8'd240),
	.RXLPM_LF_CFG                 (8'd240),
	.RXOOB_CFG                    (3'd6),
	.RXOUT_DIV                    (4'd8),
	.RXPCSRESET_TIME              (1'd1),
	.RXPHDLY_CFG                  (20'd540704),
	.RXPH_CFG                     (1'd0),
	.RXPH_MONITOR_SEL             (1'd0),
	.RXPMARESET_TIME              (2'd3),
	.RXPRBS_ERR_LOOPBACK          (1'd0),
	.RXSLIDE_AUTO_WAIT            (3'd7),
	.RXSLIDE_MODE                 ("PCS"),
	.RX_BIAS_CFG                  (3'd4),
	.RX_BUFFER_CFG                (1'd0),
	.RX_CLK25_DIV                 (3'd5),
	.RX_CLKMUX_PD                 (1'd1),
	.RX_CM_SEL                    (2'd3),
	.RX_CM_TRIM                   (2'd2),
	.RX_DATA_WIDTH                (5'd20),
	.RX_DDI_SEL                   (1'd0),
	.RX_DEBUG_CFG                 (1'd0),
	.RX_DEFER_RESET_BUF_EN        ("TRUE"),
	.RX_DFE_GAIN_CFG              (18'd135146),
	.RX_DFE_H2_CFG                (1'd0),
	.RX_DFE_H3_CFG                (7'd64),
	.RX_DFE_H4_CFG                (8'd240),
	.RX_DFE_H5_CFG                (8'd224),
	.RX_DFE_KL_CFG                (8'd254),
	.RX_DFE_KL_CFG2               (30'd806439084),
	.RX_DFE_LPM_CFG               (12'd2388),
	.RX_DFE_LPM_HOLD_DURING_EIDLE (1'd0),
	.RX_DFE_UT_CFG                (17'd73216),
	.RX_DFE_VP_CFG                (14'd16131),
	.RX_DFE_XYD_CFG               (1'd0),
	.RX_DISPERR_SEQ_MATCH         ("TRUE"),
	.RX_INT_DATAWIDTH             (1'd0),
	.RX_OS_CFG                    (8'd128),
	.RX_SIG_VALID_DLY             (4'd10),
	.RX_XCLK_SEL                  ("RXUSR"),
	.SAS_MAX_COM                  (7'd64),
	.SAS_MIN_COM                  (6'd36),
	.SATA_BURST_SEQ_LEN           (3'd5),
	.SATA_BURST_VAL               (3'd4),
	.SATA_CPLL_CFG                ("VCO_3000MHZ"),
	.SATA_EIDLE_VAL               (3'd4),
	.SATA_MAX_BURST               (4'd8),
	.SATA_MAX_INIT                (5'd21),
	.SATA_MAX_WAKE                (3'd7),
	.SATA_MIN_BURST               (3'd4),
	.SATA_MIN_INIT                (4'd12),
	.SATA_MIN_WAKE                (3'd4),
	.SHOW_REALIGN_COMMA           ("TRUE"),
	.SIM_CPLLREFCLK_SEL           ("FALSE"),
	.SIM_RECEIVER_DETECT_PASS     ("TRUE"),
	.SIM_RESET_SPEEDUP            ("FALSE"),
	.SIM_TX_EIDLE_DRIVE_LEVEL     ("X"),
	.SIM_VERSION                  ("4.0"),
	.TERM_RCAL_CFG                (5'd16),
	.TERM_RCAL_OVRD               (1'd0),
	.TRANS_TIME_RATE              (4'd14),
	.TST_RSV                      (1'd0),
	.TXBUF_EN                     ("TRUE"),
	.TXBUF_RESET_ON_RATE_CHANGE   ("TRUE"),
	.TXDLY_CFG                    (5'd31),
	.TXDLY_LCFG                   (6'd48),
	.TXDLY_TAP_CFG                (1'd0),
	.TXGEARBOX_EN                 ("FALSE"),
	.TXOUT_DIV                    (4'd8),
	.TXPCSRESET_TIME              (1'd1),
	.TXPHDLY_CFG                  (20'd540704),
	.TXPH_CFG                     (11'd1920),
	.TXPH_MONITOR_SEL             (1'd0),
	.TXPMARESET_TIME              (1'd1),
	.TX_CLK25_DIV                 (3'd5),
	.TX_CLKMUX_PD                 (1'd1),
	.TX_DATA_WIDTH                (5'd20),
	.TX_DEEMPH0                   (1'd0),
	.TX_DEEMPH1                   (1'd0),
	.TX_DRIVE_MODE                ("DIRECT"),
	.TX_EIDLE_ASSERT_DELAY        (3'd6),
	.TX_EIDLE_DEASSERT_DELAY      (3'd4),
	.TX_INT_DATAWIDTH             (1'd0),
	.TX_LOOPBACK_DRIVE_HIZ        ("FALSE"),
	.TX_MAINCURSOR_SEL            (1'd0),
	.TX_MARGIN_FULL_0             (7'd78),
	.TX_MARGIN_FULL_1             (7'd73),
	.TX_MARGIN_FULL_2             (7'd69),
	.TX_MARGIN_FULL_3             (7'd66),
	.TX_MARGIN_FULL_4             (7'd64),
	.TX_MARGIN_LOW_0              (7'd70),
	.TX_MARGIN_LOW_1              (7'd68),
	.TX_MARGIN_LOW_2              (7'd66),
	.TX_MARGIN_LOW_3              (7'd64),
	.TX_MARGIN_LOW_4              (7'd64),
	.TX_PREDRIVER_MODE            (1'd0),
	.TX_QPI_STATUS_EN             (1'd0),
	.TX_RXDETECT_CFG              (13'd6194),
	.TX_RXDETECT_REF              (3'd4),
	.TX_XCLK_SEL                  ("TXOUT"),
	.UCODEER_CLR                  (1'd0)
) GTXE2_CHANNEL (
	// Inputs.
	.CFGRESET         (1'd0),
	.CLKRSVD          (1'd0),
	.CPLLLOCKDETCLK   (sys_clk),
	.CPLLLOCKEN       (1'd1),
	.CPLLPD           (1'd0),
	.CPLLREFCLKSEL    (1'd1),
	.CPLLRESET        (1'd0),
	.DRPADDR          (gtx_drp_mux_addr),
	.DRPCLK           (gtx_drp_mux_clk),
	.DRPDI            (gtx_drp_mux_di),
	.DRPEN            (gtx_drp_mux_en),
	.DRPWE            (gtx_drp_mux_we),
	.EYESCANMODE      (1'd0),
	.EYESCANRESET     (1'd0),
	.EYESCANTRIGGER   (1'd0),
	.GTGREFCLK        (1'd0),
	.GTNORTHREFCLK0   (1'd0),
	.GTNORTHREFCLK1   (1'd0),
	.GTREFCLK0        (1'd0),
	.GTREFCLK1        (1'd0),
	.GTRESETSEL       (1'd0),
	.GTRSVD           (1'd0),
	.GTRXRESET        (gtx_rx_init_gtXxreset0),
	.GTSOUTHREFCLK0   (1'd0),
	.GTSOUTHREFCLK1   (1'd0),
	.GTTXRESET        (gtx_tx_init_gtXxreset0),
	.GTXRXN           (pcie_rx_n),
	.GTXRXP           (pcie_rx_p),
	.LOOPBACK         (gtx_loopback),
	.PCSRSVDIN        (1'd0),
	.PCSRSVDIN2       (1'd0),
	.PMARSVDIN        (1'd0),
	.PMARSVDIN2       (1'd0),
	.QPLLCLK          (gpll_clk),
	.QPLLREFCLK       (gpll_refclk),
	.RESETOVRD        (1'd0),
	.RX8B10BEN        (1'd0),
	.RXBUFRESET       (1'd0),
	.RXCDRFREQRESET   (1'd0),
	.RXCDRHOLD        (1'd0),
	.RXCDROVRDEN      (1'd0),
	.RXCDRRESET       (1'd0),
	.RXCDRRESETRSV    (1'd0),
	.RXCHBONDEN       (1'd0),
	.RXCHBONDI        (1'd0),
	.RXCHBONDLEVEL    (1'd0),
	.RXCHBONDMASTER   (1'd0),
	.RXCHBONDSLAVE    (1'd0),
	.RXCOMMADETEN     (1'd1),
	.RXDDIEN          (1'd1),
	.RXDFEAGCHOLD     (1'd0),
	.RXDFEAGCOVRDEN   (1'd0),
	.RXDFECM1EN       (1'd0),
	.RXDFELFHOLD      (1'd0),
	.RXDFELFOVRDEN    (1'd1),
	.RXDFELPMRESET    (1'd0),
	.RXDFETAP2HOLD    (1'd0),
	.RXDFETAP2OVRDEN  (1'd0),
	.RXDFETAP3HOLD    (1'd0),
	.RXDFETAP3OVRDEN  (1'd0),
	.RXDFETAP4HOLD    (1'd0),
	.RXDFETAP4OVRDEN  (1'd0),
	.RXDFETAP5HOLD    (1'd0),
	.RXDFETAP5OVRDEN  (1'd0),
	.RXDFEUTHOLD      (1'd0),
	.RXDFEUTOVRDEN    (1'd0),
	.RXDFEVPHOLD      (1'd0),
	.RXDFEVPOVRDEN    (1'd0),
	.RXDFEVSEN        (1'd0),
	.RXDFEXYDEN       (1'd1),
	.RXDFEXYDHOLD     (1'd0),
	.RXDFEXYDOVRDEN   (1'd0),
	.RXDLYBYPASS      (1'd0),
	.RXDLYEN          (1'd0),
	.RXDLYOVRDEN      (1'd0),
	.RXDLYSRESET      (gtx_rx_init_Xxdlysreset0),
	.RXELECIDLEMODE   (2'd3),
	.RXGEARBOXSLIP    (1'd0),
	.RXLPMEN          (1'd0),
	.RXLPMHFHOLD      (1'd0),
	.RXLPMHFOVRDEN    (1'd0),
	.RXLPMLFHOLD      (1'd0),
	.RXLPMLFKLOVRDEN  (1'd0),
	.RXMCOMMAALIGNEN  (1'd0),
	.RXMONITORSEL     (1'd0),
	.RXOOBRESET       (1'd0),
	.RXOSHOLD         (1'd0),
	.RXOSOVRDEN       (1'd0),
	.RXOUTCLKSEL      (2'd2),
	.RXPCOMMAALIGNEN  (1'd0),
	.RXPCSRESET       (1'd0),
	.RXPD             ({gtx_rx_init_gtXxpd0, gtx_rx_init_gtXxpd0}),
	.RXPHALIGN        (1'd0),
	.RXPHALIGNEN      (1'd0),
	.RXPHDLYPD        (1'd0),
	.RXPHDLYRESET     (1'd0),
	.RXPHOVRDEN       (1'd0),
	.RXPMARESET       (1'd0),
	.RXPOLARITY       (1'd0),
	.RXPRBSCNTRESET   (1'd0),
	.RXPRBSSEL        (1'd0),
	.RXQPIEN          (1'd0),
	.RXRATE           (1'd0),
	.RXSLIDE          (1'd0),
	.RXSYSCLKSEL      (2'd3),
	.RXUSERRDY        (gtx_rx_init_Xxuserrdy0),
	.RXUSRCLK         (rx_clk),
	.RXUSRCLK2        (rx_clk),
	.SETERRSTATUS     (1'd0),
	.TSTIN            (20'd1048575),
	.TX8B10BBYPASS    (1'd0),
	.TX8B10BEN        (1'd0),
	.TXBUFDIFFCTRL    (3'd4),
	.TXCHARDISPMODE   ({gtx_txdata[19], gtx_txdata[9]}),
	.TXCHARDISPVAL    ({gtx_txdata[18], gtx_txdata[8]}),
	.TXCHARISK        (1'd0),
	.TXCOMINIT        (1'd0),
	.TXCOMSAS         (1'd0),
	.TXCOMWAKE        (1'd0),
	.TXDATA           ({gtx_txdata[17:10], gtx_txdata[7:0]}),
	.TXDEEMPH         (1'd0),
	.TXDETECTRX       (1'd0),
	.TXDIFFCTRL       (4'd8),
	.TXDIFFPD         (1'd0),
	.TXDLYBYPASS      (1'd1),
	.TXDLYEN          (1'd0),
	.TXDLYHOLD        (1'd0),
	.TXDLYOVRDEN      (1'd0),
	.TXDLYSRESET      (gtx_tx_init_Xxdlysreset0),
	.TXDLYUPDOWN      (1'd0),
	.TXELECIDLE       (1'd0),
	.TXHEADER         (1'd0),
	.TXINHIBIT        (gtx_tx_inhibit),
	.TXMAINCURSOR     (1'd0),
	.TXMARGIN         (1'd0),
	.TXOUTCLKSEL      (2'd2),
	.TXPCSRESET       (1'd0),
	.TXPD             ({gtx_tx_init_gtXxpd0, gtx_tx_init_gtXxpd0}),
	.TXPDELECIDLEMODE (1'd0),
	.TXPHALIGN        (1'd0),
	.TXPHALIGNEN      (1'd0),
	.TXPHDLYPD        (1'd0),
	.TXPHDLYRESET     (1'd0),
	.TXPHDLYTSTCLK    (1'd0),
	.TXPHINIT         (1'd0),
	.TXPHOVRDEN       (1'd0),
	.TXPISOPD         (1'd0),
	.TXPMARESET       (1'd0),
	.TXPOLARITY       (1'd0),
	.TXPOSTCURSOR     (1'd0),
	.TXPOSTCURSORINV  (1'd0),
	.TXPRBSFORCEERR   (1'd0),
	.TXPRBSSEL        (1'd0),
	.TXPRECURSOR      (1'd0),
	.TXPRECURSORINV   (1'd0),
	.TXQPIBIASEN      (1'd0),
	.TXQPISTRONGPDOWN (1'd0),
	.TXQPIWEAKPUP     (1'd0),
	.TXRATE           (1'd0),
	.TXSEQUENCE       (1'd0),
	.TXSTARTSEQ       (1'd0),
	.TXSWING          (1'd0),
	.TXSYSCLKSEL      (2'd3),
	.TXUSERRDY        (gtx_tx_init_Xxuserrdy0),
	.TXUSRCLK         (tx_clk),
	.TXUSRCLK2        (tx_clk),

	// Outputs.
	.CPLLFBCLKLOST    (gtx0),
	.CPLLLOCK         (gtx1),
	.CPLLREFCLKLOST   (gtx2),
	.DMONITOROUT      (gtx5),
	.DRPDO            (gtx_drp_mux_do),
	.DRPRDY           (gtx_drp_mux_rdy),
	.EYESCANDATAERROR (gtx8),
	.GTREFCLKMONITOR  (gtx4),
	.GTXTXN           (pcie_tx_n),
	.GTXTXP           (pcie_tx_p),
	.PCSRSVDOUT       (gtx39),
	.PHYSTATUS        (gtx6),
	.RXBUFSTATUS      (gtx13),
	.RXBYTEISALIGNED  (gtx17),
	.RXBYTEREALIGN    (gtx18),
	.RXCDRLOCK        (gtx9),
	.RXCHANBONDSEQ    (gtx20),
	.RXCHANISALIGNED  (gtx22),
	.RXCHANREALIGN    (gtx23),
	.RXCHARISCOMMA    (gtx36),
	.RXCHARISK        ({gtx_rxdata[18], gtx_rxdata[8]}),
	.RXCHBONDO        (gtx21),
	.RXCLKCORCNT      (gtx10),
	.RXCOMINITDET     (gtx34),
	.RXCOMMADET       (gtx19),
	.RXCOMSASDET      (gtx32),
	.RXCOMWAKEDET     (gtx33),
	.RXDATA           ({gtx_rxdata[17:10], gtx_rxdata[7:0]}),
	.RXDATAVALID      (gtx28),
	.RXDISPERR        ({gtx_rxdata[19], gtx_rxdata[9]}),
	.RXDLYSRESETDONE  (gtx_rx_init_Xxdlysresetdone0),
	.RXELECIDLE       (gtx35),
	.RXHEADER         (gtx29),
	.RXHEADERVALID    (gtx30),
	.RXMONITOROUT     (gtx24),
	.RXNOTINTABLE     (gtx12),
	.RXOUTCLK         (gtx_rxoutclk),
	.RXOUTCLKFABRIC   (gtx26),
	.RXOUTCLKPCS      (gtx27),
	.RXPHALIGNDONE    (gtx_rx_init_Xxphaligndone0),
	.RXPHMONITOR      (gtx14),
	.RXPHSLIPMONITOR  (gtx15),
	.RXPRBSERR        (gtx11),
	.RXQPISENN        (gtx37),
	.RXQPISENP        (gtx38),
	.RXRATEDONE       (gtx25),
	.RXRESETDONE      (gtx_rx_init_Xxresetdone0),
	.RXSTARTOFSEQ     (gtx31),
	.RXSTATUS         (gtx16),
	.RXVALID          (gtx7),
	.TSTOUT           (gtx3),
	.TXBUFSTATUS      (gtx41),
	.TXCOMFINISH      (gtx46),
	.TXDLYSRESETDONE  (gtx_tx_init_Xxdlysresetdone0),
	.TXGEARBOXREADY   (gtx45),
	.TXOUTCLK         (gtx_txoutclk),
	.TXOUTCLKFABRIC   (gtx42),
	.TXOUTCLKPCS      (gtx43),
	.TXPHALIGNDONE    (gtx_tx_init_Xxphaligndone0),
	.TXPHINITDONE     (gtx40),
	.TXQPISENN        (gtx47),
	.TXQPISENP        (gtx48),
	.TXRATEDONE       (gtx44),
	.TXRESETDONE      (gtx_tx_init_Xxresetdone0)
);

//------------------------------------------------------------------------------
// Instance IBUFDS of IBUFDS Module.
//------------------------------------------------------------------------------
IBUFDS IBUFDS(
	// Inputs.
	.I  (clk200_p),
	.IB (clk200_n),

	// Outputs.
	.O  (clkin)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE (
	// Inputs.
	.C   (sys_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (xilinxasyncresetsynchronizerimpl0),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl0_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_1 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_1 (
	// Inputs.
	.C   (sys_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl0_rst_meta),
	.PRE (xilinxasyncresetsynchronizerimpl0),

	// Outputs.
	.Q   (sys_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_2 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_2 (
	// Inputs.
	.C   (refclk_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (xilinxasyncresetsynchronizerimpl1),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl1_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_3 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_3 (
	// Inputs.
	.C   (refclk_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl1_rst_meta),
	.PRE (xilinxasyncresetsynchronizerimpl1),

	// Outputs.
	.Q   (refclk_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_4 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_4 (
	// Inputs.
	.C   (tx_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (gtx_tx_reset_deglitched),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl2_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_5 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_5 (
	// Inputs.
	.C   (tx_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl2_rst_meta),
	.PRE (gtx_tx_reset_deglitched),

	// Outputs.
	.Q   (tx_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_6 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_6 (
	// Inputs.
	.C   (rx_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (gtx_rx_reset_deglitched),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl3_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_7 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_7 (
	// Inputs.
	.C   (rx_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl3_rst_meta),
	.PRE (gtx_rx_reset_deglitched),

	// Outputs.
	.Q   (rx_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-04-08 12:36:07.
//------------------------------------------------------------------------------
